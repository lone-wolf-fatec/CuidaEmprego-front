{"ast":null,"code":"// FuncionariosService.js\nconst STORAGE_KEYS = {\n  FUNCIONARIOS: 'funcionarios',\n  FUNCIONARIOS_POR_JORNADA: 'funcionariosPorJornada'\n};\nconst FuncionariosService = {\n  // Obter todos os funcionários\n  getTodosFuncionarios: () => {\n    const storedFuncionarios = localStorage.getItem(STORAGE_KEYS.FUNCIONARIOS);\n    return storedFuncionarios ? JSON.parse(storedFuncionarios) : [{\n      id: 1,\n      nome: 'João Silva',\n      email: 'joao.silva@empresa.com',\n      jornada: null\n    }, {\n      id: 2,\n      nome: 'Maria Oliveira',\n      email: 'maria.oliveira@empresa.com',\n      jornada: null\n    }, {\n      id: 3,\n      nome: 'Pedro Santos',\n      email: 'pedro.santos@empresa.com',\n      jornada: null\n    }, {\n      id: 4,\n      nome: 'Ana Souza',\n      email: 'ana.souza@empresa.com',\n      jornada: null\n    }, {\n      id: 5,\n      nome: 'Carlos Pereira',\n      email: 'carlos.pereira@empresa.com',\n      jornada: null\n    }];\n  },\n  // Obter funcionários por jornada\n  getFuncionariosPorJornada: () => {\n    const storedFuncionariosPorJornada = localStorage.getItem(STORAGE_KEYS.FUNCIONARIOS_POR_JORNADA);\n    return storedFuncionariosPorJornada ? JSON.parse(storedFuncionariosPorJornada) : {};\n  },\n  // Adicionar funcionário a uma jornada\n  adicionarFuncionarioNaJornada: (funcionarioId, jornadaId, funcionariosPorJornada) => {\n    const novoFuncionariosPorJornada = {\n      ...funcionariosPorJornada\n    };\n\n    // Remover funcionário de qualquer jornada anterior\n    Object.keys(novoFuncionariosPorJornada).forEach(key => {\n      novoFuncionariosPorJornada[key] = novoFuncionariosPorJornada[key].filter(id => id !== funcionarioId);\n    });\n\n    // Adicionar funcionário à nova jornada\n    if (!novoFuncionariosPorJornada[jornadaId]) {\n      novoFuncionariosPorJornada[jornadaId] = [];\n    }\n    if (!novoFuncionariosPorJornada[jornadaId].includes(funcionarioId)) {\n      novoFuncionariosPorJornada[jornadaId].push(funcionarioId);\n    }\n    return novoFuncionariosPorJornada;\n  },\n  // Remover funcionário de uma jornada\n  removerFuncionarioDaJornada: (funcionarioId, jornadaId, funcionariosPorJornada) => {\n    const novoFuncionariosPorJornada = {\n      ...funcionariosPorJornada\n    };\n    if (novoFuncionariosPorJornada[jornadaId]) {\n      novoFuncionariosPorJornada[jornadaId] = novoFuncionariosPorJornada[jornadaId].filter(id => id !== funcionarioId);\n    }\n    return novoFuncionariosPorJornada;\n  },\n  // Atualizar lista de funcionários\n  atualizarFuncionarios: funcionarios => {\n    localStorage.setItem(STORAGE_KEYS.FUNCIONARIOS, JSON.stringify(funcionarios));\n  },\n  // Atualizar funcionários por jornada\n  atualizarFuncionariosPorJornada: funcionariosPorJornada => {\n    localStorage.setItem(STORAGE_KEYS.FUNCIONARIOS_POR_JORNADA, JSON.stringify(funcionariosPorJornada));\n  }\n};\nexport default FuncionariosService;","map":{"version":3,"names":["STORAGE_KEYS","FUNCIONARIOS","FUNCIONARIOS_POR_JORNADA","FuncionariosService","getTodosFuncionarios","storedFuncionarios","localStorage","getItem","JSON","parse","id","nome","email","jornada","getFuncionariosPorJornada","storedFuncionariosPorJornada","adicionarFuncionarioNaJornada","funcionarioId","jornadaId","funcionariosPorJornada","novoFuncionariosPorJornada","Object","keys","forEach","key","filter","includes","push","removerFuncionarioDaJornada","atualizarFuncionarios","funcionarios","setItem","stringify","atualizarFuncionariosPorJornada"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/components/FuncionariosService.js"],"sourcesContent":["// FuncionariosService.js\r\nconst STORAGE_KEYS = {\r\n    FUNCIONARIOS: 'funcionarios',\r\n    FUNCIONARIOS_POR_JORNADA: 'funcionariosPorJornada'\r\n  };\r\n  \r\n  const FuncionariosService = {\r\n    // Obter todos os funcionários\r\n    getTodosFuncionarios: () => {\r\n      const storedFuncionarios = localStorage.getItem(STORAGE_KEYS.FUNCIONARIOS);\r\n      return storedFuncionarios \r\n        ? JSON.parse(storedFuncionarios) \r\n        : [\r\n            { id: 1, nome: 'João Silva', email: 'joao.silva@empresa.com', jornada: null },\r\n            { id: 2, nome: 'Maria Oliveira', email: 'maria.oliveira@empresa.com', jornada: null },\r\n            { id: 3, nome: 'Pedro Santos', email: 'pedro.santos@empresa.com', jornada: null },\r\n            { id: 4, nome: 'Ana Souza', email: 'ana.souza@empresa.com', jornada: null },\r\n            { id: 5, nome: 'Carlos Pereira', email: 'carlos.pereira@empresa.com', jornada: null }\r\n          ];\r\n    },\r\n  \r\n    // Obter funcionários por jornada\r\n    getFuncionariosPorJornada: () => {\r\n      const storedFuncionariosPorJornada = localStorage.getItem(STORAGE_KEYS.FUNCIONARIOS_POR_JORNADA);\r\n      return storedFuncionariosPorJornada \r\n        ? JSON.parse(storedFuncionariosPorJornada) \r\n        : {};\r\n    },\r\n  \r\n    // Adicionar funcionário a uma jornada\r\n    adicionarFuncionarioNaJornada: (funcionarioId, jornadaId, funcionariosPorJornada) => {\r\n      const novoFuncionariosPorJornada = { ...funcionariosPorJornada };\r\n      \r\n      // Remover funcionário de qualquer jornada anterior\r\n      Object.keys(novoFuncionariosPorJornada).forEach(key => {\r\n        novoFuncionariosPorJornada[key] = \r\n          novoFuncionariosPorJornada[key].filter(id => id !== funcionarioId);\r\n      });\r\n  \r\n      // Adicionar funcionário à nova jornada\r\n      if (!novoFuncionariosPorJornada[jornadaId]) {\r\n        novoFuncionariosPorJornada[jornadaId] = [];\r\n      }\r\n      \r\n      if (!novoFuncionariosPorJornada[jornadaId].includes(funcionarioId)) {\r\n        novoFuncionariosPorJornada[jornadaId].push(funcionarioId);\r\n      }\r\n  \r\n      return novoFuncionariosPorJornada;\r\n    },\r\n  \r\n    // Remover funcionário de uma jornada\r\n    removerFuncionarioDaJornada: (funcionarioId, jornadaId, funcionariosPorJornada) => {\r\n      const novoFuncionariosPorJornada = { ...funcionariosPorJornada };\r\n      \r\n      if (novoFuncionariosPorJornada[jornadaId]) {\r\n        novoFuncionariosPorJornada[jornadaId] = \r\n          novoFuncionariosPorJornada[jornadaId].filter(id => id !== funcionarioId);\r\n      }\r\n  \r\n      return novoFuncionariosPorJornada;\r\n    },\r\n  \r\n    // Atualizar lista de funcionários\r\n    atualizarFuncionarios: (funcionarios) => {\r\n      localStorage.setItem(STORAGE_KEYS.FUNCIONARIOS, JSON.stringify(funcionarios));\r\n    },\r\n  \r\n    // Atualizar funcionários por jornada\r\n    atualizarFuncionariosPorJornada: (funcionariosPorJornada) => {\r\n      localStorage.setItem(STORAGE_KEYS.FUNCIONARIOS_POR_JORNADA, JSON.stringify(funcionariosPorJornada));\r\n    }\r\n  };\r\n  \r\n  export default FuncionariosService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}