{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\AdminPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPage = () => {\n  _s();\n  // Estados para controle da interface\n  const [showProfileMenu, setShowProfileMenu] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [lastAction, setLastAction] = useState(null);\n  const [userData, setUserData] = useState({\n    name: 'Admin',\n    role: 'Administrador'\n  });\n  const [activeTab, setActiveTab] = useState('registros');\n  const [showApproveModal, setShowApproveModal] = useState(false);\n  const [showAdjustmentModal, setShowAdjustmentModal] = useState(false);\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [showOvertimeApprovalModal, setShowOvertimeApprovalModal] = useState(false);\n  const [showUserDetailsModal, setShowUserDetailsModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n\n  // Lista de notificações para o administrador\n  const [notifications, setNotifications] = useState([{\n    id: 1,\n    text: '3 solicitações de correção de ponto pendentes',\n    read: false,\n    date: '19/03/2025'\n  }, {\n    id: 2,\n    text: '5 atestados médicos para aprovação',\n    read: false,\n    date: '19/03/2025'\n  }, {\n    id: 3,\n    text: 'Relatório mensal de horas extras disponível',\n    read: true,\n    date: '18/03/2025'\n  }, {\n    id: 4,\n    text: 'Novo colaborador cadastrado: Maria Silva',\n    read: true,\n    date: '15/03/2025'\n  }]);\n\n  // Lista de usuários/funcionários\n  const [employees, setEmployees] = useState([{\n    id: 1,\n    name: 'João Silva',\n    department: 'TI',\n    position: 'Desenvolvedor'\n  }, {\n    id: 2,\n    name: 'Maria Oliveira',\n    department: 'RH',\n    position: 'Analista de RH'\n  }, {\n    id: 3,\n    name: 'Pedro Santos',\n    department: 'Vendas',\n    position: 'Gerente de Vendas'\n  }, {\n    id: 4,\n    name: 'Ana Costa',\n    department: 'Marketing',\n    position: 'Designer'\n  }, {\n    id: 5,\n    name: 'Carlos Souza',\n    department: 'Financeiro',\n    position: 'Contador'\n  }]);\n\n  // Lista de solicitações de correção pendentes\n  const [pendingCorrections, setPendingCorrections] = useState([{\n    id: 1,\n    employeeId: 1,\n    employeeName: 'João Silva',\n    date: '15/03/2025',\n    originalTime: '08:30',\n    requestedTime: '08:00',\n    type: 'entrada',\n    reason: 'Esqueci de registrar na chegada',\n    status: 'pendente',\n    submitted: '16/03/2025'\n  }, {\n    id: 2,\n    employeeId: 4,\n    employeeName: 'Ana Costa',\n    date: '18/03/2025',\n    originalTime: '17:15',\n    requestedTime: '18:00',\n    type: 'saída',\n    reason: 'Sistema travou na hora de registrar a saída',\n    status: 'pendente',\n    submitted: '18/03/2025'\n  }, {\n    id: 3,\n    employeeId: 2,\n    employeeName: 'Maria Oliveira',\n    date: '14/03/2025',\n    originalTime: '12:45',\n    requestedTime: '12:00',\n    type: 'saída almoço',\n    reason: 'Registrei atrasado',\n    status: 'pendente',\n    submitted: '15/03/2025'\n  }]);\n\n  // Lista de atestados médicos para aprovação\n  const [medicalCertificates, setMedicalCertificates] = useState([{\n    id: 1,\n    employeeId: 3,\n    employeeName: 'Pedro Santos',\n    date: '17/03/2025',\n    reason: 'Consulta médica',\n    fileName: 'atestado_pedro.pdf',\n    status: 'pendente',\n    submitted: '17/03/2025'\n  }, {\n    id: 2,\n    employeeId: 5,\n    employeeName: 'Carlos Souza',\n    date: '16/03/2025',\n    reason: 'Exames de rotina',\n    fileName: 'atestado_carlos.pdf',\n    status: 'pendente',\n    submitted: '16/03/2025'\n  }, {\n    id: 3,\n    employeeId: 2,\n    employeeName: 'Maria Oliveira',\n    date: '12/03/2025 a 14/03/2025',\n    reason: 'Licença médica',\n    fileName: 'atestado_maria.pdf',\n    status: 'pendente',\n    submitted: '12/03/2025'\n  }]);\n\n  // Dados de horas extras\n  const [overtimeRequests, setOvertimeRequests] = useState([{\n    id: 1,\n    employeeId: 1,\n    employeeName: 'João Silva',\n    date: '15/03/2025',\n    hours: '2:30',\n    reason: 'Finalização de projeto urgente',\n    status: 'pendente',\n    submitted: '15/03/2025'\n  }, {\n    id: 2,\n    employeeId: 3,\n    employeeName: 'Pedro Santos',\n    date: '18/03/2025',\n    hours: '1:45',\n    reason: 'Reunião com cliente',\n    status: 'pendente',\n    submitted: '18/03/2025'\n  }, {\n    id: 3,\n    employeeId: 4,\n    employeeName: 'Ana Costa',\n    date: '14/03/2025',\n    hours: '3:00',\n    reason: 'Entrega de campanha marketing',\n    status: 'aprovado',\n    submitted: '13/03/2025',\n    approvedBy: 'Admin',\n    approvedAt: '14/03/2025'\n  }]);\n\n  // Banco de horas dos funcionários\n  const [hourBank, setHourBank] = useState([{\n    employeeId: 1,\n    employeeName: 'João Silva',\n    totalOvertime: '10:45',\n    totalUsed: '4:00',\n    balance: '6:45',\n    lastUpdate: '18/03/2025'\n  }, {\n    employeeId: 2,\n    employeeName: 'Maria Oliveira',\n    totalOvertime: '5:30',\n    totalUsed: '5:30',\n    balance: '0:00',\n    lastUpdate: '14/03/2025'\n  }, {\n    employeeId: 3,\n    employeeName: 'Pedro Santos',\n    totalOvertime: '15:15',\n    totalUsed: '8:00',\n    balance: '7:15',\n    lastUpdate: '17/03/2025'\n  }, {\n    employeeId: 4,\n    employeeName: 'Ana Costa',\n    totalOvertime: '12:00',\n    totalUsed: '4:30',\n    balance: '7:30',\n    lastUpdate: '18/03/2025'\n  }, {\n    employeeId: 5,\n    employeeName: 'Carlos Souza',\n    totalOvertime: '6:30',\n    totalUsed: '2:00',\n    balance: '4:30',\n    lastUpdate: '15/03/2025'\n  }]);\n\n  // Ausências e faltas\n  const [absences, setAbsences] = useState([{\n    id: 1,\n    employeeId: 2,\n    employeeName: 'Maria Oliveira',\n    type: 'atestado',\n    startDate: '12/03/2025',\n    endDate: '14/03/2025',\n    status: 'aprovado',\n    approvedBy: 'Admin'\n  }, {\n    id: 2,\n    employeeId: 5,\n    employeeName: 'Carlos Souza',\n    type: 'falta',\n    startDate: '10/03/2025',\n    endDate: '10/03/2025',\n    status: 'não justificada'\n  }, {\n    id: 3,\n    employeeId: 1,\n    employeeName: 'João Silva',\n    type: 'atraso',\n    startDate: '15/03/2025',\n    endDate: '15/03/2025',\n    status: 'justificado',\n    reason: 'Problema no transporte público'\n  }]);\n\n  // Jornadas de trabalho configuradas\n  const [workSchedules, setWorkSchedules] = useState([{\n    id: 1,\n    name: 'Padrão',\n    startTime: '08:00',\n    lunchStart: '12:00',\n    lunchEnd: '13:00',\n    endTime: '17:00',\n    workDays: 'Segunda a Sexta',\n    totalHours: '8:00'\n  }, {\n    id: 2,\n    name: 'Meio período',\n    startTime: '08:00',\n    endTime: '12:00',\n    workDays: 'Segunda a Sexta',\n    totalHours: '4:00'\n  }, {\n    id: 3,\n    name: 'Plantão',\n    startTime: '07:00',\n    lunchStart: '12:00',\n    lunchEnd: '13:00',\n    endTime: '19:00',\n    workDays: 'Conforme Escala',\n    totalHours: '11:00'\n  }]);\n\n  // Estado para gerenciar jornadas atribuídas\n  const [assignedSchedules, setAssignedSchedules] = useState([{\n    employeeId: 1,\n    employeeName: 'João Silva',\n    scheduleId: 1,\n    scheduleName: 'Padrão',\n    startDate: '01/01/2025',\n    endDate: null\n  }, {\n    employeeId: 2,\n    employeeName: 'Maria Oliveira',\n    scheduleId: 1,\n    scheduleName: 'Padrão',\n    startDate: '01/01/2025',\n    endDate: null\n  }, {\n    employeeId: 3,\n    employeeName: 'Pedro Santos',\n    scheduleId: 1,\n    scheduleName: 'Padrão',\n    startDate: '01/01/2025',\n    endDate: null\n  }, {\n    employeeId: 4,\n    employeeName: 'Ana Costa',\n    scheduleId: 2,\n    scheduleName: 'Meio período',\n    startDate: '01/03/2025',\n    endDate: null\n  }, {\n    employeeId: 5,\n    employeeName: 'Carlos Souza',\n    scheduleId: 3,\n    scheduleName: 'Plantão',\n    startDate: '01/02/2025',\n    endDate: null\n  }]);\n\n  // Estado para armazenar férias e folgas\n  const [timeOff, setTimeOff] = useState([{\n    id: 1,\n    employeeId: 1,\n    employeeName: 'João Silva',\n    type: 'férias',\n    startDate: '01/04/2025',\n    endDate: '15/04/2025',\n    status: 'aprovado',\n    approvedBy: 'Admin'\n  }, {\n    id: 2,\n    employeeId: 2,\n    employeeName: 'Maria Oliveira',\n    type: 'folga',\n    startDate: '25/03/2025',\n    endDate: '25/03/2025',\n    status: 'pendente',\n    reason: 'Compensação banco horas'\n  }, {\n    id: 3,\n    employeeId: 3,\n    employeeName: 'Pedro Santos',\n    type: 'férias',\n    startDate: '10/05/2025',\n    endDate: '24/05/2025',\n    status: 'pendente'\n  }, {\n    id: 4,\n    employeeId: 4,\n    employeeName: 'Ana Costa',\n    type: 'folga',\n    startDate: '20/03/2025',\n    endDate: '20/03/2025',\n    status: 'aprovado',\n    approvedBy: 'Admin'\n  }]);\n\n  // Atualiza o relógio a cada segundo\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Pega as iniciais do nome para o avatar\n  const getInitials = name => {\n    if (!name) return 'A';\n    const nameParts = name.split(' ');\n    if (nameParts.length === 1) return nameParts[0].charAt(0).toUpperCase();\n    return (nameParts[0].charAt(0) + nameParts[nameParts.length - 1].charAt(0)).toUpperCase();\n  };\n\n  // Formata a hora atual\n  const formatTime = date => {\n    return date.toLocaleTimeString('pt-BR', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  // Função para marcar notificação como lida\n  const markAsRead = id => {\n    setNotifications(notifications.map(notif => notif.id === id ? {\n      ...notif,\n      read: true\n    } : notif));\n  };\n\n  // Conta notificações não lidas\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  // Função para deslogar o usuário\n  const handleLogout = () => {\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  // Função para aprovar uma solicitação de correção\n  const approveCorrection = correctionId => {\n    setPendingCorrections(pendingCorrections.map(correction => correction.id === correctionId ? {\n      ...correction,\n      status: 'aprovado',\n      approvedBy: userData.name,\n      approvedAt: currentTime.toLocaleDateString('pt-BR')\n    } : correction));\n    // Adiciona notificação para o funcionário\n    const correction = pendingCorrections.find(c => c.id === correctionId);\n    if (correction) {\n      // Simula envio de notificação para o funcionário (em um sistema real, isso seria feito no backend)\n      console.log(`Notificação enviada para ${correction.employeeName}: Sua solicitação de correção foi aprovada`);\n      // Feedback para o administrador\n      setLastAction(`Correção de ${correction.employeeName} aprovada com sucesso`);\n    }\n  };\n\n  // Função para recusar uma solicitação de correção\n  const rejectCorrection = correctionId => {\n    setPendingCorrections(pendingCorrections.map(correction => correction.id === correctionId ? {\n      ...correction,\n      status: 'recusado',\n      rejectedBy: userData.name,\n      rejectedAt: currentTime.toLocaleDateString('pt-BR')\n    } : correction));\n    // Adiciona notificação para o funcionário\n    const correction = pendingCorrections.find(c => c.id === correctionId);\n    if (correction) {\n      // Simula envio de notificação para o funcionário (em um sistema real, isso seria feito no backend)\n      console.log(`Notificação enviada para ${correction.employeeName}: Sua solicitação de correção foi recusada`);\n      // Feedback para o administrador\n      setLastAction(`Correção de ${correction.employeeName} recusada`);\n    }\n  };\n\n  // Função para aprovar um atestado médico\n  const approveMedicalCertificate = certificateId => {\n    setMedicalCertificates(medicalCertificates.map(cert => cert.id === certificateId ? {\n      ...cert,\n      status: 'aprovado',\n      approvedBy: userData.name,\n      approvedAt: currentTime.toLocaleDateString('pt-BR')\n    } : cert));\n    const cert = medicalCertificates.find(c => c.id === certificateId);\n    if (cert) {\n      // Simula envio de notificação para o funcionário\n      console.log(`Notificação enviada para ${cert.employeeName}: Seu atestado médico foi aprovado`);\n      // Registra a ausência justificada\n      const [startDate, endDate] = cert.date.includes('a') ? cert.date.split(' a ') : [cert.date, cert.date];\n      const newAbsence = {\n        id: absences.length + 1,\n        employeeId: cert.employeeId,\n        employeeName: cert.employeeName,\n        type: 'atestado',\n        startDate,\n        endDate,\n        status: 'aprovado',\n        approvedBy: userData.name\n      };\n      setAbsences([...absences, newAbsence]);\n      setLastAction(`Atestado médico de ${cert.employeeName} aprovado`);\n    }\n  };\n\n  // Função para recusar um atestado médico\n  const rejectMedicalCertificate = certificateId => {\n    setMedicalCertificates(medicalCertificates.map(cert => cert.id === certificateId ? {\n      ...cert,\n      status: 'recusado',\n      rejectedBy: userData.name,\n      rejectedAt: currentTime.toLocaleDateString('pt-BR')\n    } : cert));\n    const cert = medicalCertificates.find(c => c.id === certificateId);\n    if (cert) {\n      // Simula envio de notificação para o funcionário\n      console.log(`Notificação enviada para ${cert.employeeName}: Seu atestado médico foi recusado`);\n      setLastAction(`Atestado médico de ${cert.employeeName} recusado`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-purple-900 to-black text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-purple-900 bg-opacity-80 shadow-lg sticky top-0 z-10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto px-4 py-6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), showAdjustmentModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), showScheduleModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), showUserDetailsModal && selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-20 left-10 w-20 h-20 bg-purple-500 rounded-full opacity-5 blur-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-20 right-10 w-32 h-32 bg-purple-400 rounded-full opacity-5 blur-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-40 right-20 w-16 h-16 bg-purple-300 rounded-full opacity-5 blur-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPage, \"ACAvOv/gtf7UDxCn+jKuzMKA2t4=\");\n_c = AdminPage;\nexport default AdminPage;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AdminPage","_s","showProfileMenu","setShowProfileMenu","showNotifications","setShowNotifications","currentTime","setCurrentTime","Date","lastAction","setLastAction","userData","setUserData","name","role","activeTab","setActiveTab","showApproveModal","setShowApproveModal","showAdjustmentModal","setShowAdjustmentModal","showScheduleModal","setShowScheduleModal","showOvertimeApprovalModal","setShowOvertimeApprovalModal","showUserDetailsModal","setShowUserDetailsModal","selectedUser","setSelectedUser","selectedDate","setSelectedDate","toISOString","split","notifications","setNotifications","id","text","read","date","employees","setEmployees","department","position","pendingCorrections","setPendingCorrections","employeeId","employeeName","originalTime","requestedTime","type","reason","status","submitted","medicalCertificates","setMedicalCertificates","fileName","overtimeRequests","setOvertimeRequests","hours","approvedBy","approvedAt","hourBank","setHourBank","totalOvertime","totalUsed","balance","lastUpdate","absences","setAbsences","startDate","endDate","workSchedules","setWorkSchedules","startTime","lunchStart","lunchEnd","endTime","workDays","totalHours","assignedSchedules","setAssignedSchedules","scheduleId","scheduleName","timeOff","setTimeOff","timer","setInterval","clearInterval","getInitials","nameParts","length","charAt","toUpperCase","formatTime","toLocaleTimeString","hour","minute","second","markAsRead","map","notif","unreadCount","filter","n","handleLogout","localStorage","removeItem","window","location","href","approveCorrection","correctionId","correction","toLocaleDateString","find","c","console","log","rejectCorrection","rejectedBy","rejectedAt","approveMedicalCertificate","certificateId","cert","includes","newAbsence","rejectMedicalCertificate","className","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/AdminPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AdminPage = () => {\r\n  // Estados para controle da interface\r\n  const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n  const [showNotifications, setShowNotifications] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [lastAction, setLastAction] = useState(null);\r\n  const [userData, setUserData] = useState({ name: 'Admin', role: 'Administrador' });\r\n  const [activeTab, setActiveTab] = useState('registros');\r\n  const [showApproveModal, setShowApproveModal] = useState(false);\r\n  const [showAdjustmentModal, setShowAdjustmentModal] = useState(false);\r\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n  const [showOvertimeApprovalModal, setShowOvertimeApprovalModal] = useState(false);\r\n  const [showUserDetailsModal, setShowUserDetailsModal] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\r\n\r\n  // Lista de notificações para o administrador\r\n  const [notifications, setNotifications] = useState([\r\n    { id: 1, text: '3 solicitações de correção de ponto pendentes', read: false, date: '19/03/2025' },\r\n    { id: 2, text: '5 atestados médicos para aprovação', read: false, date: '19/03/2025' },\r\n    { id: 3, text: 'Relatório mensal de horas extras disponível', read: true, date: '18/03/2025' },\r\n    { id: 4, text: 'Novo colaborador cadastrado: Maria Silva', read: true, date: '15/03/2025' }\r\n  ]);\r\n\r\n  // Lista de usuários/funcionários\r\n  const [employees, setEmployees] = useState([\r\n    { id: 1, name: 'João Silva', department: 'TI', position: 'Desenvolvedor' },\r\n    { id: 2, name: 'Maria Oliveira', department: 'RH', position: 'Analista de RH' },\r\n    { id: 3, name: 'Pedro Santos', department: 'Vendas', position: 'Gerente de Vendas' },\r\n    { id: 4, name: 'Ana Costa', department: 'Marketing', position: 'Designer' },\r\n    { id: 5, name: 'Carlos Souza', department: 'Financeiro', position: 'Contador' }\r\n  ]);\r\n\r\n  // Lista de solicitações de correção pendentes\r\n  const [pendingCorrections, setPendingCorrections] = useState([\r\n    { id: 1, employeeId: 1, employeeName: 'João Silva', date: '15/03/2025', originalTime: '08:30', requestedTime: '08:00', type: 'entrada', reason: 'Esqueci de registrar na chegada', status: 'pendente', submitted: '16/03/2025' },\r\n    { id: 2, employeeId: 4, employeeName: 'Ana Costa', date: '18/03/2025', originalTime: '17:15', requestedTime: '18:00', type: 'saída', reason: 'Sistema travou na hora de registrar a saída', status: 'pendente', submitted: '18/03/2025' },\r\n    { id: 3, employeeId: 2, employeeName: 'Maria Oliveira', date: '14/03/2025', originalTime: '12:45', requestedTime: '12:00', type: 'saída almoço', reason: 'Registrei atrasado', status: 'pendente', submitted: '15/03/2025' }\r\n  ]);\r\n\r\n  // Lista de atestados médicos para aprovação\r\n  const [medicalCertificates, setMedicalCertificates] = useState([\r\n    { id: 1, employeeId: 3, employeeName: 'Pedro Santos', date: '17/03/2025', reason: 'Consulta médica', fileName: 'atestado_pedro.pdf', status: 'pendente', submitted: '17/03/2025' },\r\n    { id: 2, employeeId: 5, employeeName: 'Carlos Souza', date: '16/03/2025', reason: 'Exames de rotina', fileName: 'atestado_carlos.pdf', status: 'pendente', submitted: '16/03/2025' },\r\n    { id: 3, employeeId: 2, employeeName: 'Maria Oliveira', date: '12/03/2025 a 14/03/2025', reason: 'Licença médica', fileName: 'atestado_maria.pdf', status: 'pendente', submitted: '12/03/2025' }\r\n  ]);\r\n\r\n  // Dados de horas extras\r\n  const [overtimeRequests, setOvertimeRequests] = useState([\r\n    { id: 1, employeeId: 1, employeeName: 'João Silva', date: '15/03/2025', hours: '2:30', reason: 'Finalização de projeto urgente', status: 'pendente', submitted: '15/03/2025' },\r\n    { id: 2, employeeId: 3, employeeName: 'Pedro Santos', date: '18/03/2025', hours: '1:45', reason: 'Reunião com cliente', status: 'pendente', submitted: '18/03/2025' },\r\n    { id: 3, employeeId: 4, employeeName: 'Ana Costa', date: '14/03/2025', hours: '3:00', reason: 'Entrega de campanha marketing', status: 'aprovado', submitted: '13/03/2025', approvedBy: 'Admin', approvedAt: '14/03/2025' }\r\n  ]);\r\n\r\n  // Banco de horas dos funcionários\r\n  const [hourBank, setHourBank] = useState([\r\n    { employeeId: 1, employeeName: 'João Silva', totalOvertime: '10:45', totalUsed: '4:00', balance: '6:45', lastUpdate: '18/03/2025' },\r\n    { employeeId: 2, employeeName: 'Maria Oliveira', totalOvertime: '5:30', totalUsed: '5:30', balance: '0:00', lastUpdate: '14/03/2025' },\r\n    { employeeId: 3, employeeName: 'Pedro Santos', totalOvertime: '15:15', totalUsed: '8:00', balance: '7:15', lastUpdate: '17/03/2025' },\r\n    { employeeId: 4, employeeName: 'Ana Costa', totalOvertime: '12:00', totalUsed: '4:30', balance: '7:30', lastUpdate: '18/03/2025' },\r\n    { employeeId: 5, employeeName: 'Carlos Souza', totalOvertime: '6:30', totalUsed: '2:00', balance: '4:30', lastUpdate: '15/03/2025' }\r\n  ]);\r\n\r\n  // Ausências e faltas\r\n  const [absences, setAbsences] = useState([\r\n    { id: 1, employeeId: 2, employeeName: 'Maria Oliveira', type: 'atestado', startDate: '12/03/2025', endDate: '14/03/2025', status: 'aprovado', approvedBy: 'Admin' },\r\n    { id: 2, employeeId: 5, employeeName: 'Carlos Souza', type: 'falta', startDate: '10/03/2025', endDate: '10/03/2025', status: 'não justificada' },\r\n    { id: 3, employeeId: 1, employeeName: 'João Silva', type: 'atraso', startDate: '15/03/2025', endDate: '15/03/2025', status: 'justificado', reason: 'Problema no transporte público' }\r\n  ]);\r\n\r\n  // Jornadas de trabalho configuradas\r\n  const [workSchedules, setWorkSchedules] = useState([\r\n    { id: 1, name: 'Padrão', startTime: '08:00', lunchStart: '12:00', lunchEnd: '13:00', endTime: '17:00', workDays: 'Segunda a Sexta', totalHours: '8:00' },\r\n    { id: 2, name: 'Meio período', startTime: '08:00', endTime: '12:00', workDays: 'Segunda a Sexta', totalHours: '4:00' },\r\n    { id: 3, name: 'Plantão', startTime: '07:00', lunchStart: '12:00', lunchEnd: '13:00', endTime: '19:00', workDays: 'Conforme Escala', totalHours: '11:00' }\r\n  ]);\r\n\r\n  // Estado para gerenciar jornadas atribuídas\r\n  const [assignedSchedules, setAssignedSchedules] = useState([\r\n    { employeeId: 1, employeeName: 'João Silva', scheduleId: 1, scheduleName: 'Padrão', startDate: '01/01/2025', endDate: null },\r\n    { employeeId: 2, employeeName: 'Maria Oliveira', scheduleId: 1, scheduleName: 'Padrão', startDate: '01/01/2025', endDate: null },\r\n    { employeeId: 3, employeeName: 'Pedro Santos', scheduleId: 1, scheduleName: 'Padrão', startDate: '01/01/2025', endDate: null },\r\n    { employeeId: 4, employeeName: 'Ana Costa', scheduleId: 2, scheduleName: 'Meio período', startDate: '01/03/2025', endDate: null },\r\n    { employeeId: 5, employeeName: 'Carlos Souza', scheduleId: 3, scheduleName: 'Plantão', startDate: '01/02/2025', endDate: null }\r\n  ]);\r\n\r\n  // Estado para armazenar férias e folgas\r\n  const [timeOff, setTimeOff] = useState([\r\n    { id: 1, employeeId: 1, employeeName: 'João Silva', type: 'férias', startDate: '01/04/2025', endDate: '15/04/2025', status: 'aprovado', approvedBy: 'Admin' },\r\n    { id: 2, employeeId: 2, employeeName: 'Maria Oliveira', type: 'folga', startDate: '25/03/2025', endDate: '25/03/2025', status: 'pendente', reason: 'Compensação banco horas' },\r\n    { id: 3, employeeId: 3, employeeName: 'Pedro Santos', type: 'férias', startDate: '10/05/2025', endDate: '24/05/2025', status: 'pendente' },\r\n    { id: 4, employeeId: 4, employeeName: 'Ana Costa', type: 'folga', startDate: '20/03/2025', endDate: '20/03/2025', status: 'aprovado', approvedBy: 'Admin' }\r\n  ]);\r\n\r\n  // Atualiza o relógio a cada segundo\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  // Pega as iniciais do nome para o avatar\r\n  const getInitials = (name) => {\r\n    if (!name) return 'A';\r\n    const nameParts = name.split(' ');\r\n    if (nameParts.length === 1) return nameParts[0].charAt(0).toUpperCase();\r\n    return (nameParts[0].charAt(0) + nameParts[nameParts.length - 1].charAt(0)).toUpperCase();\r\n  };\r\n\r\n  // Formata a hora atual\r\n  const formatTime = (date) => {\r\n    return date.toLocaleTimeString('pt-BR', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit'\r\n    });\r\n  };\r\n\r\n  // Função para marcar notificação como lida\r\n  const markAsRead = (id) => {\r\n    setNotifications(notifications.map(notif =>\r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ));\r\n  };\r\n\r\n  // Conta notificações não lidas\r\n  const unreadCount = notifications.filter(n => !n.read).length;\r\n\r\n  // Função para deslogar o usuário\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('user');\r\n    window.location.href = '/';\r\n  };\r\n\r\n  // Função para aprovar uma solicitação de correção\r\n  const approveCorrection = (correctionId) => {\r\n    setPendingCorrections(pendingCorrections.map(correction =>\r\n      correction.id === correctionId ? { ...correction, status: 'aprovado', approvedBy: userData.name, approvedAt: currentTime.toLocaleDateString('pt-BR') } : correction\r\n    ));\r\n    // Adiciona notificação para o funcionário\r\n    const correction = pendingCorrections.find(c => c.id === correctionId);\r\n    if (correction) {\r\n      // Simula envio de notificação para o funcionário (em um sistema real, isso seria feito no backend)\r\n      console.log(`Notificação enviada para ${correction.employeeName}: Sua solicitação de correção foi aprovada`);\r\n      // Feedback para o administrador\r\n      setLastAction(`Correção de ${correction.employeeName} aprovada com sucesso`);\r\n    }\r\n  };\r\n\r\n  // Função para recusar uma solicitação de correção\r\n  const rejectCorrection = (correctionId) => {\r\n    setPendingCorrections(pendingCorrections.map(correction =>\r\n      correction.id === correctionId ? { ...correction, status: 'recusado', rejectedBy: userData.name, rejectedAt: currentTime.toLocaleDateString('pt-BR') } : correction\r\n    ));\r\n    // Adiciona notificação para o funcionário\r\n    const correction = pendingCorrections.find(c => c.id === correctionId);\r\n    if (correction) {\r\n      // Simula envio de notificação para o funcionário (em um sistema real, isso seria feito no backend)\r\n      console.log(`Notificação enviada para ${correction.employeeName}: Sua solicitação de correção foi recusada`);\r\n      // Feedback para o administrador\r\n      setLastAction(`Correção de ${correction.employeeName} recusada`);\r\n    }\r\n  };\r\n\r\n  // Função para aprovar um atestado médico\r\n  const approveMedicalCertificate = (certificateId) => {\r\n    setMedicalCertificates(medicalCertificates.map(cert =>\r\n      cert.id === certificateId ? { ...cert, status: 'aprovado', approvedBy: userData.name, approvedAt: currentTime.toLocaleDateString('pt-BR') } : cert\r\n    ));\r\n    const cert = medicalCertificates.find(c => c.id === certificateId);\r\n    if (cert) {\r\n      // Simula envio de notificação para o funcionário\r\n      console.log(`Notificação enviada para ${cert.employeeName}: Seu atestado médico foi aprovado`);\r\n      // Registra a ausência justificada\r\n      const [startDate, endDate] = cert.date.includes('a') ? cert.date.split(' a ') : [cert.date, cert.date];\r\n      const newAbsence = {\r\n        id: absences.length + 1,\r\n        employeeId: cert.employeeId,\r\n        employeeName: cert.employeeName,\r\n        type: 'atestado',\r\n        startDate,\r\n        endDate,\r\n        status: 'aprovado',\r\n        approvedBy: userData.name\r\n      };\r\n      setAbsences([...absences, newAbsence]);\r\n      setLastAction(`Atestado médico de ${cert.employeeName} aprovado`);\r\n    }\r\n  };\r\n\r\n  // Função para recusar um atestado médico\r\n  const rejectMedicalCertificate = (certificateId) => {\r\n    setMedicalCertificates(medicalCertificates.map(cert =>\r\n      cert.id === certificateId ? { ...cert, status: 'recusado', rejectedBy: userData.name, rejectedAt: currentTime.toLocaleDateString('pt-BR') } : cert\r\n    ));\r\n    const cert = medicalCertificates.find(c => c.id === certificateId);\r\n    if (cert) {\r\n      // Simula envio de notificação para o funcionário\r\n      console.log(`Notificação enviada para ${cert.employeeName}: Seu atestado médico foi recusado`);\r\n      setLastAction(`Atestado médico de ${cert.employeeName} recusado`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 to-black text-white\">\r\n      {/* Header */}\r\n      <header className=\"bg-purple-900 bg-opacity-80 shadow-lg sticky top-0 z-10\">\r\n        {/* ... (código do header) ... */}\r\n      </header>\r\n\r\n      {/* Main Content */}\r\n      <main className=\"container mx-auto px-4 py-6\">\r\n        {/* ... (código do conteúdo principal) ... */}\r\n      </main>\r\n\r\n      {/* Modais */}\r\n      {showAdjustmentModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          {/* ... (código do modal de ajuste de banco de horas) ... */}\r\n        </div>\r\n      )}\r\n\r\n      {showScheduleModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          {/* ... (código do modal de criação de nova jornada) ... */}\r\n        </div>\r\n      )}\r\n\r\n      {showUserDetailsModal && selectedUser && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          {/* ... (código do modal de detalhes do usuário) ... */}\r\n        </div>\r\n      )}\r\n\r\n      {/* Decorações */}\r\n      <div className=\"fixed top-20 left-10 w-20 h-20 bg-purple-500 rounded-full opacity-5 blur-xl\"></div>\r\n      <div className=\"fixed bottom-20 right-10 w-32 h-32 bg-purple-400 rounded-full opacity-5 blur-xl\"></div>\r\n      <div className=\"fixed top-40 right-20 w-16 h-16 bg-purple-300 rounded-full opacity-5 blur-xl\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}