{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\context\\\\FuncionariosContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Criar o Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FuncionariosContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para acessar o Context\nexport const useFuncionarios = () => {\n  _s();\n  return useContext(FuncionariosContext);\n};\n_s(useFuncionarios, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const FuncionariosProvider = ({\n  children\n}) => {\n  _s2();\n  // Estado para armazenar a lista de funcionários\n  const [funcionarios, setFuncionarios] = useState([]);\n\n  // Carregar funcionários ao iniciar\n  useEffect(() => {\n    carregarFuncionarios();\n\n    // Adicionar listener para mudanças no localStorage de registeredUsers\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  // Função para lidar com mudanças no localStorage\n  const handleStorageChange = e => {\n    if (e.key === 'registeredUsers') {\n      carregarFuncionarios();\n    }\n  };\n\n  // Função para carregar funcionários do localStorage\n  const carregarFuncionarios = () => {\n    try {\n      // Primeiro verifica se já existe uma lista de funcionários no localStorage\n      const storedFuncionarios = localStorage.getItem('funcionarios');\n      let listaFuncionarios = [];\n      if (storedFuncionarios) {\n        listaFuncionarios = JSON.parse(storedFuncionarios);\n      }\n\n      // Depois busca os usuários registrados\n      const registeredUsers = localStorage.getItem('registeredUsers');\n      if (registeredUsers) {\n        const users = JSON.parse(registeredUsers);\n\n        // Para cada usuário registrado, verifica se já existe na lista de funcionários\n        users.forEach(user => {\n          const funcionarioExiste = listaFuncionarios.some(func => func.id === user.id);\n          if (!funcionarioExiste) {\n            // Adiciona o novo usuário à lista de funcionários\n            listaFuncionarios.push({\n              id: user.id,\n              nome: user.name\n            });\n          }\n        });\n      }\n\n      // Se não houver dados, usa uma lista padrão\n      if (listaFuncionarios.length === 0) {\n        listaFuncionarios = [{\n          id: 101,\n          nome: 'João Silva'\n        }, {\n          id: 102,\n          nome: 'Maria Oliveira'\n        }, {\n          id: 103,\n          nome: 'Carlos Pereira'\n        }, {\n          id: 104,\n          nome: 'Ana Souza'\n        }, {\n          id: 105,\n          nome: 'Pedro Santos'\n        }];\n      }\n\n      // Atualiza o estado e salva no localStorage\n      setFuncionarios(listaFuncionarios);\n      localStorage.setItem('funcionarios', JSON.stringify(listaFuncionarios));\n    } catch (error) {\n      console.error('Erro ao carregar funcionários:', error);\n      // Em caso de erro, carrega a lista padrão\n      const listaDefault = [{\n        id: 101,\n        nome: 'João Silva'\n      }, {\n        id: 102,\n        nome: 'Maria Oliveira'\n      }, {\n        id: 103,\n        nome: 'Carlos Pereira'\n      }, {\n        id: 104,\n        nome: 'Ana Souza'\n      }, {\n        id: 105,\n        nome: 'Pedro Santos'\n      }];\n      setFuncionarios(listaDefault);\n    }\n  };\n\n  // Função para adicionar um novo funcionário\n  const adicionarFuncionario = novoFuncionario => {\n    // Verifica se o funcionário já existe\n    const funcionarioExiste = funcionarios.some(func => func.id === novoFuncionario.id);\n    if (!funcionarioExiste) {\n      const novaLista = [...funcionarios, novoFuncionario];\n      setFuncionarios(novaLista);\n      localStorage.setItem('funcionarios', JSON.stringify(novaLista));\n    }\n  };\n\n  // Função para adicionar um funcionário a partir do registro de usuário\n  const adicionarFuncionarioFromUser = user => {\n    if (!user || !user.id || !user.name) return;\n    adicionarFuncionario({\n      id: user.id,\n      nome: user.name\n    });\n  };\n\n  // Função para atualizar um funcionário\n  const atualizarFuncionario = (id, dadosAtualizados) => {\n    const funcionarioIndex = funcionarios.findIndex(func => func.id === id);\n    if (funcionarioIndex !== -1) {\n      const novaLista = [...funcionarios];\n      novaLista[funcionarioIndex] = {\n        ...novaLista[funcionarioIndex],\n        ...dadosAtualizados\n      };\n      setFuncionarios(novaLista);\n      localStorage.setItem('funcionarios', JSON.stringify(novaLista));\n    }\n  };\n\n  // Função para sincronizar com usuários registrados\n  const sincronizarUsuariosRegistrados = () => {\n    try {\n      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\n      let atualizou = false;\n      registeredUsers.forEach(user => {\n        const funcionarioExiste = funcionarios.some(func => func.id === user.id);\n        if (!funcionarioExiste) {\n          adicionarFuncionarioFromUser(user);\n          atualizou = true;\n        }\n      });\n      if (atualizou) {\n        console.log('Funcionários sincronizados com sucesso!');\n      }\n    } catch (error) {\n      console.error('Erro ao sincronizar funcionários:', error);\n    }\n  };\n\n  // Objeto de valor para o Provider\n  const contextValue = {\n    funcionarios,\n    adicionarFuncionario,\n    adicionarFuncionarioFromUser,\n    atualizarFuncionario,\n    sincronizarUsuariosRegistrados,\n    carregarFuncionarios\n  };\n  return /*#__PURE__*/_jsxDEV(FuncionariosContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s2(FuncionariosProvider, \"C2qvOBZGUl6ifuezZEm7TBYrGPA=\");\n_c = FuncionariosProvider;\nvar _c;\n$RefreshReg$(_c, \"FuncionariosProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","FuncionariosContext","useFuncionarios","_s","FuncionariosProvider","children","_s2","funcionarios","setFuncionarios","carregarFuncionarios","window","addEventListener","handleStorageChange","removeEventListener","e","key","storedFuncionarios","localStorage","getItem","listaFuncionarios","JSON","parse","registeredUsers","users","forEach","user","funcionarioExiste","some","func","id","push","nome","name","length","setItem","stringify","error","console","listaDefault","adicionarFuncionario","novoFuncionario","novaLista","adicionarFuncionarioFromUser","atualizarFuncionario","dadosAtualizados","funcionarioIndex","findIndex","sincronizarUsuariosRegistrados","atualizou","log","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/context/FuncionariosContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\n// Criar o Context\r\nconst FuncionariosContext = createContext();\r\n\r\n// Hook personalizado para acessar o Context\r\nexport const useFuncionarios = () => useContext(FuncionariosContext);\r\n\r\nexport const FuncionariosProvider = ({ children }) => {\r\n  // Estado para armazenar a lista de funcionários\r\n  const [funcionarios, setFuncionarios] = useState([]);\r\n  \r\n  // Carregar funcionários ao iniciar\r\n  useEffect(() => {\r\n    carregarFuncionarios();\r\n    \r\n    // Adicionar listener para mudanças no localStorage de registeredUsers\r\n    window.addEventListener('storage', handleStorageChange);\r\n    \r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, []);\r\n  \r\n  // Função para lidar com mudanças no localStorage\r\n  const handleStorageChange = (e) => {\r\n    if (e.key === 'registeredUsers') {\r\n      carregarFuncionarios();\r\n    }\r\n  };\r\n  \r\n  // Função para carregar funcionários do localStorage\r\n  const carregarFuncionarios = () => {\r\n    try {\r\n      // Primeiro verifica se já existe uma lista de funcionários no localStorage\r\n      const storedFuncionarios = localStorage.getItem('funcionarios');\r\n      let listaFuncionarios = [];\r\n      \r\n      if (storedFuncionarios) {\r\n        listaFuncionarios = JSON.parse(storedFuncionarios);\r\n      }\r\n      \r\n      // Depois busca os usuários registrados\r\n      const registeredUsers = localStorage.getItem('registeredUsers');\r\n      \r\n      if (registeredUsers) {\r\n        const users = JSON.parse(registeredUsers);\r\n        \r\n        // Para cada usuário registrado, verifica se já existe na lista de funcionários\r\n        users.forEach(user => {\r\n          const funcionarioExiste = listaFuncionarios.some(func => func.id === user.id);\r\n          \r\n          if (!funcionarioExiste) {\r\n            // Adiciona o novo usuário à lista de funcionários\r\n            listaFuncionarios.push({\r\n              id: user.id,\r\n              nome: user.name\r\n            });\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Se não houver dados, usa uma lista padrão\r\n      if (listaFuncionarios.length === 0) {\r\n        listaFuncionarios = [\r\n          { id: 101, nome: 'João Silva' },\r\n          { id: 102, nome: 'Maria Oliveira' },\r\n          { id: 103, nome: 'Carlos Pereira' },\r\n          { id: 104, nome: 'Ana Souza' },\r\n          { id: 105, nome: 'Pedro Santos' }\r\n        ];\r\n      }\r\n      \r\n      // Atualiza o estado e salva no localStorage\r\n      setFuncionarios(listaFuncionarios);\r\n      localStorage.setItem('funcionarios', JSON.stringify(listaFuncionarios));\r\n    } catch (error) {\r\n      console.error('Erro ao carregar funcionários:', error);\r\n      // Em caso de erro, carrega a lista padrão\r\n      const listaDefault = [\r\n        { id: 101, nome: 'João Silva' },\r\n        { id: 102, nome: 'Maria Oliveira' },\r\n        { id: 103, nome: 'Carlos Pereira' },\r\n        { id: 104, nome: 'Ana Souza' },\r\n        { id: 105, nome: 'Pedro Santos' }\r\n      ];\r\n      setFuncionarios(listaDefault);\r\n    }\r\n  };\r\n  \r\n  // Função para adicionar um novo funcionário\r\n  const adicionarFuncionario = (novoFuncionario) => {\r\n    // Verifica se o funcionário já existe\r\n    const funcionarioExiste = funcionarios.some(func => func.id === novoFuncionario.id);\r\n    \r\n    if (!funcionarioExiste) {\r\n      const novaLista = [...funcionarios, novoFuncionario];\r\n      setFuncionarios(novaLista);\r\n      localStorage.setItem('funcionarios', JSON.stringify(novaLista));\r\n    }\r\n  };\r\n  \r\n  // Função para adicionar um funcionário a partir do registro de usuário\r\n  const adicionarFuncionarioFromUser = (user) => {\r\n    if (!user || !user.id || !user.name) return;\r\n    \r\n    adicionarFuncionario({\r\n      id: user.id,\r\n      nome: user.name\r\n    });\r\n  };\r\n  \r\n  // Função para atualizar um funcionário\r\n  const atualizarFuncionario = (id, dadosAtualizados) => {\r\n    const funcionarioIndex = funcionarios.findIndex(func => func.id === id);\r\n    \r\n    if (funcionarioIndex !== -1) {\r\n      const novaLista = [...funcionarios];\r\n      novaLista[funcionarioIndex] = { ...novaLista[funcionarioIndex], ...dadosAtualizados };\r\n      \r\n      setFuncionarios(novaLista);\r\n      localStorage.setItem('funcionarios', JSON.stringify(novaLista));\r\n    }\r\n  };\r\n  \r\n  // Função para sincronizar com usuários registrados\r\n  const sincronizarUsuariosRegistrados = () => {\r\n    try {\r\n      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\r\n      let atualizou = false;\r\n      \r\n      registeredUsers.forEach(user => {\r\n        const funcionarioExiste = funcionarios.some(func => func.id === user.id);\r\n        \r\n        if (!funcionarioExiste) {\r\n          adicionarFuncionarioFromUser(user);\r\n          atualizou = true;\r\n        }\r\n      });\r\n      \r\n      if (atualizou) {\r\n        console.log('Funcionários sincronizados com sucesso!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao sincronizar funcionários:', error);\r\n    }\r\n  };\r\n  \r\n  // Objeto de valor para o Provider\r\n  const contextValue = {\r\n    funcionarios,\r\n    adicionarFuncionario,\r\n    adicionarFuncionarioFromUser,\r\n    atualizarFuncionario,\r\n    sincronizarUsuariosRegistrados,\r\n    carregarFuncionarios\r\n  };\r\n  \r\n  return (\r\n    <FuncionariosContext.Provider value={contextValue}>\r\n      {children}\r\n    </FuncionariosContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}