{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\wokshifts\\\\WorkshiftContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkshiftContext = /*#__PURE__*/createContext();\n\n// Create a custom hook to use the context\nexport const useWorkshift = () => {\n  _s();\n  return useContext(WorkshiftContext);\n};\n\n// Create the provider component\n_s(useWorkshift, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const WorkshiftProvider = ({\n  children\n}) => {\n  _s2();\n  // State for workshift data\n  const [workshifts, setWorkshifts] = useState([]);\n  const [employeesByWorkshift, setEmployeesByWorkshift] = useState({});\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    // Load workshifts\n    const storedWorkshifts = localStorage.getItem('jornadas');\n    if (storedWorkshifts) {\n      try {\n        const parsedWorkshifts = JSON.parse(storedWorkshifts);\n        if (Array.isArray(parsedWorkshifts)) {\n          setWorkshifts(parsedWorkshifts);\n        }\n      } catch (error) {\n        console.error('Error loading workshifts from localStorage:', error);\n      }\n    }\n\n    // Load employees by workshift\n    const storedEmployeesByWorkshift = localStorage.getItem('funcionariosPorJornada');\n    if (storedEmployeesByWorkshift) {\n      try {\n        const parsedEmployeesByWorkshift = JSON.parse(storedEmployeesByWorkshift);\n        if (parsedEmployeesByWorkshift && typeof parsedEmployeesByWorkshift === 'object') {\n          setEmployeesByWorkshift(parsedEmployeesByWorkshift);\n        }\n      } catch (error) {\n        console.error('Error loading employees by workshift from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save data to localStorage when it changes\n  useEffect(() => {\n    if (workshifts.length > 0) {\n      localStorage.setItem('jornadas', JSON.stringify(workshifts));\n    }\n  }, [workshifts]);\n  useEffect(() => {\n    if (Object.keys(employeesByWorkshift).length > 0) {\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(employeesByWorkshift));\n    }\n  }, [employeesByWorkshift]);\n\n  // Function to get workshift data for a specific employee\n  const getEmployeeWorkshift = employeeName => {\n    if (!employeeName) return null;\n\n    // Find the workshift ID for this employee\n    let workshiftId = null;\n    for (const [id, employees] of Object.entries(employeesByWorkshift)) {\n      if (Array.isArray(employees) && employees.includes(employeeName)) {\n        workshiftId = parseInt(id);\n        break;\n      }\n    }\n    if (workshiftId === null) return null;\n\n    // Find the workshift data\n    const workshiftData = workshifts.find(w => w.id === workshiftId);\n    return workshiftData || null;\n  };\n\n  // Function to add or update workshift\n  const updateWorkshift = workshift => {\n    setWorkshifts(prev => {\n      const exists = prev.some(w => w.id === workshift.id);\n      if (exists) {\n        return prev.map(w => w.id === workshift.id ? workshift : w);\n      } else {\n        return [...prev, workshift];\n      }\n    });\n  };\n\n  // Function to add or remove employee from workshift\n  const updateEmployeeWorkshift = (employeeName, workshiftId) => {\n    // First, remove the employee from any existing workshifts\n    const newEmployeesByWorkshift = {\n      ...employeesByWorkshift\n    };\n    for (const id in newEmployeesByWorkshift) {\n      if (Array.isArray(newEmployeesByWorkshift[id]) && newEmployeesByWorkshift[id].includes(employeeName)) {\n        newEmployeesByWorkshift[id] = newEmployeesByWorkshift[id].filter(name => name !== employeeName);\n      }\n    }\n\n    // Then, add the employee to the new workshift if provided\n    if (workshiftId) {\n      if (!newEmployeesByWorkshift[workshiftId]) {\n        newEmployeesByWorkshift[workshiftId] = [];\n      }\n      if (!newEmployeesByWorkshift[workshiftId].includes(employeeName)) {\n        newEmployeesByWorkshift[workshiftId] = [...newEmployeesByWorkshift[workshiftId], employeeName];\n      }\n    }\n    setEmployeesByWorkshift(newEmployeesByWorkshift);\n  };\n\n  // Function to render days of week\n  const renderWorkDays = days => {\n    const dayNames = {\n      0: 'Dom',\n      1: 'Seg',\n      2: 'Ter',\n      3: 'Qua',\n      4: 'Qui',\n      5: 'Sex',\n      6: 'Sáb'\n    };\n    if (!days || days.length === 0) return 'Escala especial';\n    if (days.length === 7) return 'Todos os dias';\n    if (days.length === 5 && days.includes(1) && days.includes(2) && days.includes(3) && days.includes(4) && days.includes(5)) {\n      return 'Segunda a Sexta';\n    }\n    if (days.length === 6 && days.includes(1) && days.includes(2) && days.includes(3) && days.includes(4) && days.includes(5) && days.includes(6)) {\n      return 'Segunda a Sábado';\n    }\n    return days.map(day => dayNames[day]).join(', ');\n  };\n  const value = {\n    workshifts,\n    employeesByWorkshift,\n    getEmployeeWorkshift,\n    updateWorkshift,\n    updateEmployeeWorkshift,\n    renderWorkDays\n  };\n  return /*#__PURE__*/_jsxDEV(WorkshiftContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s2(WorkshiftProvider, \"VHMj85eODdV6vN/JCyKYp0noY7s=\");\n_c = WorkshiftProvider;\nvar _c;\n$RefreshReg$(_c, \"WorkshiftProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","WorkshiftContext","useWorkshift","_s","WorkshiftProvider","children","_s2","workshifts","setWorkshifts","employeesByWorkshift","setEmployeesByWorkshift","storedWorkshifts","localStorage","getItem","parsedWorkshifts","JSON","parse","Array","isArray","error","console","storedEmployeesByWorkshift","parsedEmployeesByWorkshift","length","setItem","stringify","Object","keys","getEmployeeWorkshift","employeeName","workshiftId","id","employees","entries","includes","parseInt","workshiftData","find","w","updateWorkshift","workshift","prev","exists","some","map","updateEmployeeWorkshift","newEmployeesByWorkshift","filter","name","renderWorkDays","days","dayNames","day","join","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/wokshifts/WorkshiftContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create the context\r\nconst WorkshiftContext = createContext();\r\n\r\n// Create a custom hook to use the context\r\nexport const useWorkshift = () => useContext(WorkshiftContext);\r\n\r\n// Create the provider component\r\nexport const WorkshiftProvider = ({ children }) => {\r\n  // State for workshift data\r\n  const [workshifts, setWorkshifts] = useState([]);\r\n  const [employeesByWorkshift, setEmployeesByWorkshift] = useState({});\r\n  \r\n  // Load data from localStorage on component mount\r\n  useEffect(() => {\r\n    // Load workshifts\r\n    const storedWorkshifts = localStorage.getItem('jornadas');\r\n    if (storedWorkshifts) {\r\n      try {\r\n        const parsedWorkshifts = JSON.parse(storedWorkshifts);\r\n        if (Array.isArray(parsedWorkshifts)) {\r\n          setWorkshifts(parsedWorkshifts);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading workshifts from localStorage:', error);\r\n      }\r\n    }\r\n    \r\n    // Load employees by workshift\r\n    const storedEmployeesByWorkshift = localStorage.getItem('funcionariosPorJornada');\r\n    if (storedEmployeesByWorkshift) {\r\n      try {\r\n        const parsedEmployeesByWorkshift = JSON.parse(storedEmployeesByWorkshift);\r\n        if (parsedEmployeesByWorkshift && typeof parsedEmployeesByWorkshift === 'object') {\r\n          setEmployeesByWorkshift(parsedEmployeesByWorkshift);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading employees by workshift from localStorage:', error);\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  // Save data to localStorage when it changes\r\n  useEffect(() => {\r\n    if (workshifts.length > 0) {\r\n      localStorage.setItem('jornadas', JSON.stringify(workshifts));\r\n    }\r\n  }, [workshifts]);\r\n  \r\n  useEffect(() => {\r\n    if (Object.keys(employeesByWorkshift).length > 0) {\r\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(employeesByWorkshift));\r\n    }\r\n  }, [employeesByWorkshift]);\r\n  \r\n  // Function to get workshift data for a specific employee\r\n  const getEmployeeWorkshift = (employeeName) => {\r\n    if (!employeeName) return null;\r\n    \r\n    // Find the workshift ID for this employee\r\n    let workshiftId = null;\r\n    \r\n    for (const [id, employees] of Object.entries(employeesByWorkshift)) {\r\n      if (Array.isArray(employees) && employees.includes(employeeName)) {\r\n        workshiftId = parseInt(id);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (workshiftId === null) return null;\r\n    \r\n    // Find the workshift data\r\n    const workshiftData = workshifts.find(w => w.id === workshiftId);\r\n    return workshiftData || null;\r\n  };\r\n  \r\n  // Function to add or update workshift\r\n  const updateWorkshift = (workshift) => {\r\n    setWorkshifts(prev => {\r\n      const exists = prev.some(w => w.id === workshift.id);\r\n      if (exists) {\r\n        return prev.map(w => w.id === workshift.id ? workshift : w);\r\n      } else {\r\n        return [...prev, workshift];\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Function to add or remove employee from workshift\r\n  const updateEmployeeWorkshift = (employeeName, workshiftId) => {\r\n    // First, remove the employee from any existing workshifts\r\n    const newEmployeesByWorkshift = { ...employeesByWorkshift };\r\n    \r\n    for (const id in newEmployeesByWorkshift) {\r\n      if (Array.isArray(newEmployeesByWorkshift[id]) && newEmployeesByWorkshift[id].includes(employeeName)) {\r\n        newEmployeesByWorkshift[id] = newEmployeesByWorkshift[id].filter(name => name !== employeeName);\r\n      }\r\n    }\r\n    \r\n    // Then, add the employee to the new workshift if provided\r\n    if (workshiftId) {\r\n      if (!newEmployeesByWorkshift[workshiftId]) {\r\n        newEmployeesByWorkshift[workshiftId] = [];\r\n      }\r\n      if (!newEmployeesByWorkshift[workshiftId].includes(employeeName)) {\r\n        newEmployeesByWorkshift[workshiftId] = [...newEmployeesByWorkshift[workshiftId], employeeName];\r\n      }\r\n    }\r\n    \r\n    setEmployeesByWorkshift(newEmployeesByWorkshift);\r\n  };\r\n  \r\n  // Function to render days of week\r\n  const renderWorkDays = (days) => {\r\n    const dayNames = {\r\n      0: 'Dom',\r\n      1: 'Seg',\r\n      2: 'Ter',\r\n      3: 'Qua',\r\n      4: 'Qui',\r\n      5: 'Sex',\r\n      6: 'Sáb'\r\n    };\r\n    \r\n    if (!days || days.length === 0) return 'Escala especial';\r\n    if (days.length === 7) return 'Todos os dias';\r\n    \r\n    if (days.length === 5 && days.includes(1) && days.includes(2) && \r\n        days.includes(3) && days.includes(4) && days.includes(5)) {\r\n      return 'Segunda a Sexta';\r\n    }\r\n    \r\n    if (days.length === 6 && days.includes(1) && days.includes(2) && \r\n        days.includes(3) && days.includes(4) && days.includes(5) && days.includes(6)) {\r\n      return 'Segunda a Sábado';\r\n    }\r\n    \r\n    return days.map(day => dayNames[day]).join(', ');\r\n  };\r\n  \r\n  const value = {\r\n    workshifts,\r\n    employeesByWorkshift,\r\n    getEmployeeWorkshift,\r\n    updateWorkshift,\r\n    updateEmployeeWorkshift,\r\n    renderWorkDays\r\n  };\r\n  \r\n  return (\r\n    <WorkshiftContext.Provider value={value}>\r\n      {children}\r\n    </WorkshiftContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}