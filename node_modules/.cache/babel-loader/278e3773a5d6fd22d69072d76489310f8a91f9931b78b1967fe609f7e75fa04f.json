{"ast":null,"code":"// Serviço para gerenciar funcionários no sistema\nconst FuncionariosService = {\n  // Obter todos os funcionários\n  getTodosFuncionarios: () => {\n    const storedFuncionarios = localStorage.getItem('funcionarios');\n    if (storedFuncionarios) {\n      return JSON.parse(storedFuncionarios);\n    }\n\n    // Dados iniciais se não houver no localStorage\n    const funcionariosIniciais = [{\n      id: 1,\n      nome: 'João Silva',\n      cargo: 'Analista',\n      departamento: 'TI'\n    }, {\n      id: 2,\n      nome: 'Maria Oliveira',\n      cargo: 'Gerente',\n      departamento: 'RH'\n    }, {\n      id: 3,\n      nome: 'Pedro Santos',\n      cargo: 'Desenvolvedor',\n      departamento: 'TI'\n    }, {\n      id: 4,\n      nome: 'Ana Souza',\n      cargo: 'Recepcionista',\n      departamento: 'Administrativo'\n    }, {\n      id: 5,\n      nome: 'Carlos Pereira',\n      cargo: 'Analista',\n      departamento: 'Financeiro'\n    }, {\n      id: 6,\n      nome: 'Fernanda Lima',\n      cargo: 'Vendedor',\n      departamento: 'Comercial'\n    }, {\n      id: 7,\n      nome: 'Rafael Gomes',\n      cargo: 'Auxiliar',\n      departamento: 'Logística'\n    }, {\n      id: 8,\n      nome: 'Juliana Costa',\n      cargo: 'Enfermeira',\n      departamento: 'Saúde'\n    }, {\n      id: 9,\n      nome: 'Roberto Alves',\n      cargo: 'Segurança',\n      departamento: 'Administrativo'\n    }, {\n      id: 10,\n      nome: 'Camila Dias',\n      cargo: 'Designer',\n      departamento: 'Marketing'\n    }, {\n      id: 11,\n      nome: 'Lucas Ferreira',\n      cargo: 'Contador',\n      departamento: 'Financeiro'\n    }, {\n      id: 12,\n      nome: 'Amanda Martins',\n      cargo: 'Assistente',\n      departamento: 'RH'\n    }];\n    localStorage.setItem('funcionarios', JSON.stringify(funcionariosIniciais));\n    return funcionariosIniciais;\n  },\n  // Obter funcionários por jornada\n  getFuncionariosPorJornada: () => {\n    const storedFuncionariosPorJornada = localStorage.getItem('funcionariosPorJornada');\n    if (storedFuncionariosPorJornada) {\n      return JSON.parse(storedFuncionariosPorJornada);\n    }\n\n    // Dados iniciais se não houver no localStorage\n    const funcionariosPorJornadaIniciais = {\n      1: ['João Silva', 'Maria Oliveira', 'Pedro Santos'],\n      2: ['Ana Souza'],\n      3: ['Carlos Pereira'],\n      4: ['Fernanda Lima', 'Rafael Gomes'],\n      5: ['Juliana Costa', 'Roberto Alves']\n    };\n    localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornadaIniciais));\n    return funcionariosPorJornadaIniciais;\n  },\n  // Salvar funcionários por jornada\n  salvarFuncionariosPorJornada: funcionariosPorJornada => {\n    localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\n    return funcionariosPorJornada;\n  },\n  // Adicionar funcionário à jornada\n  adicionarFuncionarioJornada: (jornadaId, funcionarioNome) => {\n    const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\n\n    // Verificar se jornada já tem lista de funcionários\n    if (!funcionariosPorJornada[jornadaId]) {\n      funcionariosPorJornada[jornadaId] = [];\n    }\n\n    // Verificar se funcionário já está na jornada\n    if (!funcionariosPorJornada[jornadaId].includes(funcionarioNome)) {\n      funcionariosPorJornada[jornadaId].push(funcionarioNome);\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\n    }\n    return funcionariosPorJornada;\n  },\n  // Remover funcionário da jornada\n  removerFuncionarioJornada: (jornadaId, funcionarioNome) => {\n    const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\n    if (funcionariosPorJornada[jornadaId]) {\n      funcionariosPorJornada[jornadaId] = funcionariosPorJornada[jornadaId].filter(nome => nome !== funcionarioNome);\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\n    }\n    return funcionariosPorJornada;\n  },\n  // Obter funcionários disponíveis (que não estão em nenhuma jornada ou estão na jornada específica)\n  getFuncionariosDisponiveis: jornadaId => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n    const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\n\n    // Criar conjunto com todos os funcionários já atribuídos a outras jornadas\n    const funcionariosAtribuidos = new Set();\n    Object.entries(funcionariosPorJornada).forEach(([id, funcionarios]) => {\n      if (parseInt(id) !== parseInt(jornadaId)) {\n        funcionarios.forEach(nome => {\n          funcionariosAtribuidos.add(nome);\n        });\n      }\n    });\n\n    // Filtrar funcionários disponíveis\n    return todosFuncionarios.filter(funcionario => !funcionariosAtribuidos.has(funcionario.nome));\n  },\n  // Buscar funcionário por ID\n  buscarFuncionarioPorId: id => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n    return todosFuncionarios.find(f => f.id === id);\n  },\n  // Buscar funcionário pelo nome\n  buscarFuncionarioPorNome: nome => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n    return todosFuncionarios.find(f => f.nome === nome);\n  },\n  // Adicionar novo funcionário\n  adicionarFuncionario: funcionario => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n\n    // Gerar ID único baseado no timestamp\n    const novoFuncionario = {\n      ...funcionario,\n      id: Date.now()\n    };\n    const funcionariosAtualizados = [...todosFuncionarios, novoFuncionario];\n    localStorage.setItem('funcionarios', JSON.stringify(funcionariosAtualizados));\n    return novoFuncionario;\n  },\n  // Atualizar funcionário existente\n  atualizarFuncionario: funcionario => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n\n    // Buscar o funcionário antigo para verificar se o nome mudou\n    const funcionarioAntigo = todosFuncionarios.find(f => f.id === funcionario.id);\n    const nomeAlterado = funcionarioAntigo && funcionarioAntigo.nome !== funcionario.nome;\n\n    // Atualizar o funcionário na lista\n    const funcionariosAtualizados = todosFuncionarios.map(f => f.id === funcionario.id ? funcionario : f);\n    localStorage.setItem('funcionarios', JSON.stringify(funcionariosAtualizados));\n\n    // Se o nome do funcionário mudou, precisamos atualizar as referências nas jornadas\n    if (nomeAlterado) {\n      const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\n      Object.keys(funcionariosPorJornada).forEach(jornadaId => {\n        const index = funcionariosPorJornada[jornadaId].indexOf(funcionarioAntigo.nome);\n        if (index !== -1) {\n          funcionariosPorJornada[jornadaId][index] = funcionario.nome;\n        }\n      });\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\n    }\n    return funcionario;\n  },\n  // Excluir funcionário\n  excluirFuncionario: id => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n    const funcionario = todosFuncionarios.find(f => f.id === id);\n    if (!funcionario) return false;\n\n    // Remover funcionário da lista\n    const funcionariosAtualizados = todosFuncionarios.filter(f => f.id !== id);\n    localStorage.setItem('funcionarios', JSON.stringify(funcionariosAtualizados));\n\n    // Remover funcionário de todas as jornadas\n    const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\n    Object.keys(funcionariosPorJornada).forEach(jornadaId => {\n      funcionariosPorJornada[jornadaId] = funcionariosPorJornada[jornadaId].filter(nome => nome !== funcionario.nome);\n    });\n    localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\n    return true;\n  },\n  // Buscar funcionários com filtro\n  buscarFuncionariosFiltrados: termo => {\n    const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\n    if (!termo) return todosFuncionarios;\n    const termoBusca = termo.toLowerCase();\n    return todosFuncionarios.filter(f => f.nome.toLowerCase().includes(termoBusca) || f.cargo.toLowerCase().includes(termoBusca) || f.departamento.toLowerCase().includes(termoBusca));\n  }\n};\nexport default FuncionariosService;","map":{"version":3,"names":["FuncionariosService","getTodosFuncionarios","storedFuncionarios","localStorage","getItem","JSON","parse","funcionariosIniciais","id","nome","cargo","departamento","setItem","stringify","getFuncionariosPorJornada","storedFuncionariosPorJornada","funcionariosPorJornadaIniciais","salvarFuncionariosPorJornada","funcionariosPorJornada","adicionarFuncionarioJornada","jornadaId","funcionarioNome","includes","push","removerFuncionarioJornada","filter","getFuncionariosDisponiveis","todosFuncionarios","funcionariosAtribuidos","Set","Object","entries","forEach","funcionarios","parseInt","add","funcionario","has","buscarFuncionarioPorId","find","f","buscarFuncionarioPorNome","adicionarFuncionario","novoFuncionario","Date","now","funcionariosAtualizados","atualizarFuncionario","funcionarioAntigo","nomeAlterado","map","keys","index","indexOf","excluirFuncionario","buscarFuncionariosFiltrados","termo","termoBusca","toLowerCase"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/components/FuncionariosService.js"],"sourcesContent":["// Serviço para gerenciar funcionários no sistema\r\nconst FuncionariosService = {\r\n    // Obter todos os funcionários\r\n    getTodosFuncionarios: () => {\r\n      const storedFuncionarios = localStorage.getItem('funcionarios');\r\n      if (storedFuncionarios) {\r\n        return JSON.parse(storedFuncionarios);\r\n      }\r\n      \r\n      // Dados iniciais se não houver no localStorage\r\n      const funcionariosIniciais = [\r\n        { id: 1, nome: 'João Silva', cargo: 'Analista', departamento: 'TI' },\r\n        { id: 2, nome: 'Maria Oliveira', cargo: 'Gerente', departamento: 'RH' },\r\n        { id: 3, nome: 'Pedro Santos', cargo: 'Desenvolvedor', departamento: 'TI' },\r\n        { id: 4, nome: 'Ana Souza', cargo: 'Recepcionista', departamento: 'Administrativo' },\r\n        { id: 5, nome: 'Carlos Pereira', cargo: 'Analista', departamento: 'Financeiro' },\r\n        { id: 6, nome: 'Fernanda Lima', cargo: 'Vendedor', departamento: 'Comercial' },\r\n        { id: 7, nome: 'Rafael Gomes', cargo: 'Auxiliar', departamento: 'Logística' },\r\n        { id: 8, nome: 'Juliana Costa', cargo: 'Enfermeira', departamento: 'Saúde' },\r\n        { id: 9, nome: 'Roberto Alves', cargo: 'Segurança', departamento: 'Administrativo' },\r\n        { id: 10, nome: 'Camila Dias', cargo: 'Designer', departamento: 'Marketing' },\r\n        { id: 11, nome: 'Lucas Ferreira', cargo: 'Contador', departamento: 'Financeiro' },\r\n        { id: 12, nome: 'Amanda Martins', cargo: 'Assistente', departamento: 'RH' }\r\n      ];\r\n      \r\n      localStorage.setItem('funcionarios', JSON.stringify(funcionariosIniciais));\r\n      return funcionariosIniciais;\r\n    },\r\n    \r\n    // Obter funcionários por jornada\r\n    getFuncionariosPorJornada: () => {\r\n      const storedFuncionariosPorJornada = localStorage.getItem('funcionariosPorJornada');\r\n      if (storedFuncionariosPorJornada) {\r\n        return JSON.parse(storedFuncionariosPorJornada);\r\n      }\r\n      \r\n      // Dados iniciais se não houver no localStorage\r\n      const funcionariosPorJornadaIniciais = {\r\n        1: ['João Silva', 'Maria Oliveira', 'Pedro Santos'],\r\n        2: ['Ana Souza'],\r\n        3: ['Carlos Pereira'],\r\n        4: ['Fernanda Lima', 'Rafael Gomes'],\r\n        5: ['Juliana Costa', 'Roberto Alves']\r\n      };\r\n      \r\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornadaIniciais));\r\n      return funcionariosPorJornadaIniciais;\r\n    },\r\n    \r\n    // Salvar funcionários por jornada\r\n    salvarFuncionariosPorJornada: (funcionariosPorJornada) => {\r\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\r\n      return funcionariosPorJornada;\r\n    },\r\n    \r\n    // Adicionar funcionário à jornada\r\n    adicionarFuncionarioJornada: (jornadaId, funcionarioNome) => {\r\n      const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\r\n      \r\n      // Verificar se jornada já tem lista de funcionários\r\n      if (!funcionariosPorJornada[jornadaId]) {\r\n        funcionariosPorJornada[jornadaId] = [];\r\n      }\r\n      \r\n      // Verificar se funcionário já está na jornada\r\n      if (!funcionariosPorJornada[jornadaId].includes(funcionarioNome)) {\r\n        funcionariosPorJornada[jornadaId].push(funcionarioNome);\r\n        localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\r\n      }\r\n      \r\n      return funcionariosPorJornada;\r\n    },\r\n    \r\n    // Remover funcionário da jornada\r\n    removerFuncionarioJornada: (jornadaId, funcionarioNome) => {\r\n      const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\r\n      \r\n      if (funcionariosPorJornada[jornadaId]) {\r\n        funcionariosPorJornada[jornadaId] = funcionariosPorJornada[jornadaId].filter(\r\n          nome => nome !== funcionarioNome\r\n        );\r\n        localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\r\n      }\r\n      \r\n      return funcionariosPorJornada;\r\n    },\r\n    \r\n    // Obter funcionários disponíveis (que não estão em nenhuma jornada ou estão na jornada específica)\r\n    getFuncionariosDisponiveis: (jornadaId) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\r\n      \r\n      // Criar conjunto com todos os funcionários já atribuídos a outras jornadas\r\n      const funcionariosAtribuidos = new Set();\r\n      Object.entries(funcionariosPorJornada).forEach(([id, funcionarios]) => {\r\n        if (parseInt(id) !== parseInt(jornadaId)) {\r\n          funcionarios.forEach(nome => {\r\n            funcionariosAtribuidos.add(nome);\r\n          });\r\n        }\r\n      });\r\n      \r\n      // Filtrar funcionários disponíveis\r\n      return todosFuncionarios.filter(funcionario => \r\n        !funcionariosAtribuidos.has(funcionario.nome)\r\n      );\r\n    },\r\n    \r\n    // Buscar funcionário por ID\r\n    buscarFuncionarioPorId: (id) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      return todosFuncionarios.find(f => f.id === id);\r\n    },\r\n    \r\n    // Buscar funcionário pelo nome\r\n    buscarFuncionarioPorNome: (nome) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      return todosFuncionarios.find(f => f.nome === nome);\r\n    },\r\n    \r\n    // Adicionar novo funcionário\r\n    adicionarFuncionario: (funcionario) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      \r\n      // Gerar ID único baseado no timestamp\r\n      const novoFuncionario = {\r\n        ...funcionario,\r\n        id: Date.now()\r\n      };\r\n      \r\n      const funcionariosAtualizados = [...todosFuncionarios, novoFuncionario];\r\n      localStorage.setItem('funcionarios', JSON.stringify(funcionariosAtualizados));\r\n      \r\n      return novoFuncionario;\r\n    },\r\n    \r\n    // Atualizar funcionário existente\r\n    atualizarFuncionario: (funcionario) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      \r\n      // Buscar o funcionário antigo para verificar se o nome mudou\r\n      const funcionarioAntigo = todosFuncionarios.find(f => f.id === funcionario.id);\r\n      const nomeAlterado = funcionarioAntigo && funcionarioAntigo.nome !== funcionario.nome;\r\n      \r\n      // Atualizar o funcionário na lista\r\n      const funcionariosAtualizados = todosFuncionarios.map(f => \r\n        f.id === funcionario.id ? funcionario : f\r\n      );\r\n      \r\n      localStorage.setItem('funcionarios', JSON.stringify(funcionariosAtualizados));\r\n      \r\n      // Se o nome do funcionário mudou, precisamos atualizar as referências nas jornadas\r\n      if (nomeAlterado) {\r\n        const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\r\n        \r\n        Object.keys(funcionariosPorJornada).forEach(jornadaId => {\r\n          const index = funcionariosPorJornada[jornadaId].indexOf(funcionarioAntigo.nome);\r\n          if (index !== -1) {\r\n            funcionariosPorJornada[jornadaId][index] = funcionario.nome;\r\n          }\r\n        });\r\n        \r\n        localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\r\n      }\r\n      \r\n      return funcionario;\r\n    },\r\n    \r\n    // Excluir funcionário\r\n    excluirFuncionario: (id) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      const funcionario = todosFuncionarios.find(f => f.id === id);\r\n      \r\n      if (!funcionario) return false;\r\n      \r\n      // Remover funcionário da lista\r\n      const funcionariosAtualizados = todosFuncionarios.filter(f => f.id !== id);\r\n      localStorage.setItem('funcionarios', JSON.stringify(funcionariosAtualizados));\r\n      \r\n      // Remover funcionário de todas as jornadas\r\n      const funcionariosPorJornada = FuncionariosService.getFuncionariosPorJornada();\r\n      \r\n      Object.keys(funcionariosPorJornada).forEach(jornadaId => {\r\n        funcionariosPorJornada[jornadaId] = funcionariosPorJornada[jornadaId].filter(\r\n          nome => nome !== funcionario.nome\r\n        );\r\n      });\r\n      \r\n      localStorage.setItem('funcionariosPorJornada', JSON.stringify(funcionariosPorJornada));\r\n      \r\n      return true;\r\n    },\r\n    \r\n    // Buscar funcionários com filtro\r\n    buscarFuncionariosFiltrados: (termo) => {\r\n      const todosFuncionarios = FuncionariosService.getTodosFuncionarios();\r\n      \r\n      if (!termo) return todosFuncionarios;\r\n      \r\n      const termoBusca = termo.toLowerCase();\r\n      return todosFuncionarios.filter(f => \r\n        f.nome.toLowerCase().includes(termoBusca) || \r\n        f.cargo.toLowerCase().includes(termoBusca) || \r\n        f.departamento.toLowerCase().includes(termoBusca)\r\n      );\r\n    }\r\n  };\r\n  \r\n  export default FuncionariosService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}