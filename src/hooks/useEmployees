import { useMemo } from 'react';
import { useUserContext } from '../context/UserContext';

/**
 * Hook personalizado para obter a lista de funcionários
 * com funções úteis para manipulação de dados
 */
export const useEmployees = () => {
  const { users, loading, updateUsers, addUser } = useUserContext();
  
  // Filtramos apenas funcionários não-admin por padrão
  const employees = useMemo(() => {
    return users.filter(user => !user.isAdmin);
  }, [users]);
  
  // Todos os usuários, incluindo admins
  const allUsers = useMemo(() => {
    return users;
  }, [users]);
  
  // Apenas admins
  const adminUsers = useMemo(() => {
    return users.filter(user => user.isAdmin);
  }, [users]);
  
  // Encontrar um funcionário pelo ID
  const findEmployeeById = (id) => {
    return users.find(user => user.id === parseInt(id));
  };
  
  // Encontrar um funcionário pelo nome
  const findEmployeeByName = (name) => {
    return users.find(user => user.nome.toLowerCase() === name.toLowerCase());
  };
  
  // Obter funcionários ordenados por nome
  const getSortedEmployees = () => {
    return [...employees].sort((a, b) => a.nome.localeCompare(b.nome));
  };
  
  // Adicionar novo funcionário e atualizar contexto
  const addNewEmployee = (employeeData) => {
    const newEmployee = {
      id: Date.now(), // ID temporário baseado no timestamp
      nome: employeeData.nome,
      email: employeeData.email,
      isAdmin: false,
      ...employeeData
    };
    
    addUser(newEmployee);
    return newEmployee;
  };
  
  return {
    employees,        // Lista de funcionários (não-admin)
    allUsers,         // Todos os usuários
    adminUsers,       // Apenas admins
    loading,          // Estado de carregamento
    findEmployeeById, // Função para encontrar por ID
    findEmployeeByName, // Função para encontrar por nome
    getSortedEmployees, // Função para obter ordenados
    addNewEmployee,   // Função para adicionar novo funcionário
    refreshEmployees: updateUsers // Atualizar lista de funcionários
  };
};