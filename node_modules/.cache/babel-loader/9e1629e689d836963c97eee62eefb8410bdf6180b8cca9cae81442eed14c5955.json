{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Criação do contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\n// Provider que encapsula a aplicação\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Estado para armazenar todos os usuários cadastrados\n  const [registeredUsers, setRegisteredUsers] = useState([]);\n\n  // Estado para o usuário atual logado\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Carrega os usuários do localStorage quando o componente é montado\n  useEffect(() => {\n    const storedUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\n    setRegisteredUsers(storedUsers);\n    const storedCurrentUser = JSON.parse(localStorage.getItem('user') || '{}');\n    if (storedCurrentUser && storedCurrentUser.authenticated) {\n      setCurrentUser(storedCurrentUser);\n    }\n  }, []);\n\n  // Função para adicionar um novo usuário\n  const registerUser = newUser => {\n    if (registeredUsers.some(user => user.email === newUser.email)) {\n      throw new Error('Este email já está em uso.');\n    }\n    const userWithId = {\n      ...newUser,\n      id: registeredUsers.length + 1,\n      createdAt: new Date().toISOString()\n    };\n    const updatedUsers = [...registeredUsers, userWithId];\n    setRegisteredUsers(updatedUsers);\n    localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));\n    return userWithId;\n  };\n\n  // Função para fazer login\n  const loginUser = (email, password) => {\n    const user = registeredUsers.find(u => u.email === email);\n    if (!user) {\n      throw new Error('Email não encontrado. Por favor, faça o registro.');\n    }\n    if (user.password !== password) {\n      throw new Error('Senha incorreta.');\n    }\n    const isMockAdmin = user.email.toLowerCase().includes('admin');\n    const userData = {\n      authenticated: true,\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      roles: isMockAdmin ? ['ADMIN'] : ['FUNCIONARIO'],\n      token: 'mock-jwt-token-123456'\n    };\n    localStorage.setItem('token', userData.token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentUser(userData);\n    return userData;\n  };\n\n  // Função para fazer logout\n  const logoutUser = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n  const value = {\n    registeredUsers,\n    currentUser,\n    registerUser,\n    loginUser,\n    logoutUser,\n    setRegisteredUsers\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para usar o contexto\n_s(UserProvider, \"MDBfhuMW+eDr6VTNooQ88+PA6Fs=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser deve ser usado dentro de um UserProvider');\n  }\n  return context;\n};\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","registeredUsers","setRegisteredUsers","currentUser","setCurrentUser","storedUsers","JSON","parse","localStorage","getItem","storedCurrentUser","authenticated","registerUser","newUser","some","user","email","Error","userWithId","id","length","createdAt","Date","toISOString","updatedUsers","setItem","stringify","loginUser","password","find","u","isMockAdmin","toLowerCase","includes","userData","name","roles","token","logoutUser","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","undefined","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\n// Criação do contexto\r\nexport const UserContext = createContext();\r\n\r\n// Provider que encapsula a aplicação\r\nexport const UserProvider = ({ children }) => {\r\n  // Estado para armazenar todos os usuários cadastrados\r\n  const [registeredUsers, setRegisteredUsers] = useState([]);\r\n  \r\n  // Estado para o usuário atual logado\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  // Carrega os usuários do localStorage quando o componente é montado\r\n  useEffect(() => {\r\n    const storedUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\r\n    setRegisteredUsers(storedUsers);\r\n\r\n    const storedCurrentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n    if (storedCurrentUser && storedCurrentUser.authenticated) {\r\n      setCurrentUser(storedCurrentUser);\r\n    }\r\n  }, []);\r\n\r\n  // Função para adicionar um novo usuário\r\n  const registerUser = (newUser) => {\r\n    if (registeredUsers.some(user => user.email === newUser.email)) {\r\n      throw new Error('Este email já está em uso.');\r\n    }\r\n\r\n    const userWithId = {\r\n      ...newUser,\r\n      id: registeredUsers.length + 1,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    const updatedUsers = [...registeredUsers, userWithId];\r\n    setRegisteredUsers(updatedUsers);\r\n    localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));\r\n\r\n    return userWithId;\r\n  };\r\n\r\n  // Função para fazer login\r\n  const loginUser = (email, password) => {\r\n    const user = registeredUsers.find(u => u.email === email);\r\n    \r\n    if (!user) {\r\n      throw new Error('Email não encontrado. Por favor, faça o registro.');\r\n    }\r\n    \r\n    if (user.password !== password) {\r\n      throw new Error('Senha incorreta.');\r\n    }\r\n    \r\n    const isMockAdmin = user.email.toLowerCase().includes('admin');\r\n    \r\n    const userData = {\r\n      authenticated: true,\r\n      id: user.id,\r\n      email: user.email,\r\n      name: user.name,\r\n      roles: isMockAdmin ? ['ADMIN'] : ['FUNCIONARIO'],\r\n      token: 'mock-jwt-token-123456',\r\n    };\r\n    \r\n    localStorage.setItem('token', userData.token);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    \r\n    setCurrentUser(userData);\r\n    \r\n    return userData;\r\n  };\r\n\r\n  // Função para fazer logout\r\n  const logoutUser = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  const value = {\r\n    registeredUsers,\r\n    currentUser,\r\n    registerUser,\r\n    loginUser,\r\n    logoutUser,\r\n    setRegisteredUsers,\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para usar o contexto\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (context === undefined) {\r\n    throw new Error('useUser deve ser usado dentro de um UserProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IAC/EP,kBAAkB,CAACG,WAAW,CAAC;IAE/B,MAAMK,iBAAiB,GAAGJ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAC1E,IAAIC,iBAAiB,IAAIA,iBAAiB,CAACC,aAAa,EAAE;MACxDP,cAAc,CAACM,iBAAiB,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,YAAY,GAAIC,OAAO,IAAK;IAChC,IAAIZ,eAAe,CAACa,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,KAAKH,OAAO,CAACG,KAAK,CAAC,EAAE;MAC9D,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,MAAMC,UAAU,GAAG;MACjB,GAAGL,OAAO;MACVM,EAAE,EAAElB,eAAe,CAACmB,MAAM,GAAG,CAAC;MAC9BC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED,MAAMC,YAAY,GAAG,CAAC,GAAGvB,eAAe,EAAEiB,UAAU,CAAC;IACrDhB,kBAAkB,CAACsB,YAAY,CAAC;IAChChB,YAAY,CAACiB,OAAO,CAAC,iBAAiB,EAAEnB,IAAI,CAACoB,SAAS,CAACF,YAAY,CAAC,CAAC;IAErE,OAAON,UAAU;EACnB,CAAC;;EAED;EACA,MAAMS,SAAS,GAAGA,CAACX,KAAK,EAAEY,QAAQ,KAAK;IACrC,MAAMb,IAAI,GAAGd,eAAe,CAAC4B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACd,KAAK,KAAKA,KAAK,CAAC;IAEzD,IAAI,CAACD,IAAI,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,mDAAmD,CAAC;IACtE;IAEA,IAAIF,IAAI,CAACa,QAAQ,KAAKA,QAAQ,EAAE;MAC9B,MAAM,IAAIX,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,MAAMc,WAAW,GAAGhB,IAAI,CAACC,KAAK,CAACgB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC;IAE9D,MAAMC,QAAQ,GAAG;MACfvB,aAAa,EAAE,IAAI;MACnBQ,EAAE,EAAEJ,IAAI,CAACI,EAAE;MACXH,KAAK,EAAED,IAAI,CAACC,KAAK;MACjBmB,IAAI,EAAEpB,IAAI,CAACoB,IAAI;MACfC,KAAK,EAAEL,WAAW,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;MAChDM,KAAK,EAAE;IACT,CAAC;IAED7B,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAES,QAAQ,CAACG,KAAK,CAAC;IAC7C7B,YAAY,CAACiB,OAAO,CAAC,MAAM,EAAEnB,IAAI,CAACoB,SAAS,CAACQ,QAAQ,CAAC,CAAC;IAEtD9B,cAAc,CAAC8B,QAAQ,CAAC;IAExB,OAAOA,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMI,UAAU,GAAGA,CAAA,KAAM;IACvB9B,YAAY,CAAC+B,UAAU,CAAC,OAAO,CAAC;IAChC/B,YAAY,CAAC+B,UAAU,CAAC,MAAM,CAAC;IAC/BnC,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMoC,KAAK,GAAG;IACZvC,eAAe;IACfE,WAAW;IACXS,YAAY;IACZe,SAAS;IACTW,UAAU;IACVpC;EACF,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAAC4C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzC,QAAA,EAChCA;EAAQ;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA7C,EAAA,CA3FaF,YAAY;AAAAgD,EAAA,GAAZhD,YAAY;AA4FzB,OAAO,MAAMiD,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGvD,UAAU,CAACG,WAAW,CAAC;EACvC,IAAIoD,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIjC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOgC,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}