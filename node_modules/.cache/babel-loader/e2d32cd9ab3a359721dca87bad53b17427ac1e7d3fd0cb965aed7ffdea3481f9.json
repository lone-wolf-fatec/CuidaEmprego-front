{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\context\\\\PontoContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Criar o Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PontoContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para facilitar o uso do contexto\nexport const usePonto = () => {\n  _s();\n  return useContext(PontoContext);\n};\n\n// Função auxiliar para pegar iniciais do nome\n_s(usePonto, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction getInitials(name) {\n  if (!name) return 'U';\n  const nameParts = name.split(' ');\n  if (nameParts.length === 1) return nameParts[0].charAt(0).toUpperCase();\n  return (nameParts[0].charAt(0) + nameParts[nameParts.length - 1].charAt(0)).toUpperCase();\n}\n\n// Provider Component\nconst PontoProvider = ({\n  children\n}) => {\n  _s2();\n  // Obter dados do usuário logado do localStorage\n  const [userData, setUserData] = useState(() => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('user')) || {};\n      return {\n        id: storedUser.id || 1,\n        name: storedUser.name || 'Usuário',\n        email: storedUser.email || '',\n        initials: getInitials(storedUser.name),\n        isAdmin: storedUser.isAdmin || false\n      };\n    } catch (error) {\n      console.error('Erro ao carregar userData:', error);\n      return {\n        id: 1,\n        name: 'Usuário',\n        email: '',\n        initials: 'U',\n        isAdmin: false\n      };\n    }\n  });\n\n  // Registros de ponto\n  const [timeEntries, setTimeEntries] = useState(() => {\n    try {\n      const storedEntries = JSON.parse(localStorage.getItem('timeEntries')) || [];\n      return Array.isArray(storedEntries) ? storedEntries : [];\n    } catch (error) {\n      console.error('Erro ao carregar registros de ponto:', error);\n      return [];\n    }\n  });\n\n  // Solicitações de ajuste\n  const [solicitacoesAjuste, setSolicitacoesAjuste] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem('ajustePontoSolicitacoes')) || [];\n    } catch (error) {\n      console.error('Erro ao carregar solicitações de ajuste:', error);\n      return [];\n    }\n  });\n\n  // Efeito para salvar timeEntries no localStorage\n  useEffect(() => {\n    if (timeEntries.length > 0) {\n      localStorage.setItem('timeEntries', JSON.stringify(timeEntries));\n    }\n  }, [timeEntries]);\n\n  // Efeito para salvar solicitações no localStorage\n  useEffect(() => {\n    if (solicitacoesAjuste.length > 0) {\n      localStorage.setItem('ajustePontoSolicitacoes', JSON.stringify(solicitacoesAjuste));\n    }\n  }, [solicitacoesAjuste]);\n\n  // Função para registrar entrada ou saída de ponto\n  const registrarPonto = tipo => {\n    const now = new Date();\n    const newEntry = {\n      type: tipo,\n      time: now.toLocaleTimeString('pt-BR', {\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      date: now.toLocaleDateString('pt-BR'),\n      user: userData.name,\n      status: 'pendente',\n      employeeId: userData.id,\n      employeeName: userData.name,\n      registeredBy: userData.name\n    };\n    setTimeEntries(prevEntries => [newEntry, ...prevEntries]);\n\n    // Criar notificação para o admin\n    const adminNotification = {\n      id: Date.now(),\n      message: `${userData.name} registrou ${tipo} às ${newEntry.time}`,\n      date: now.toLocaleDateString('pt-BR'),\n      read: false\n    };\n    try {\n      const currentAdminNotifications = JSON.parse(localStorage.getItem('adminNotifications')) || [];\n      localStorage.setItem('adminNotifications', JSON.stringify([adminNotification, ...currentAdminNotifications]));\n    } catch (error) {\n      console.error('Erro ao salvar notificação do admin:', error);\n    }\n    return newEntry;\n  };\n\n  // Função para enviar uma solicitação de correção\n  const enviarSolicitacaoCorrecao = dadosCorrecao => {\n    let dataFormatada = dadosCorrecao.date;\n    if (dadosCorrecao.date && dadosCorrecao.date.includes('-')) {\n      const [ano, mes, dia] = dadosCorrecao.date.split('-');\n      dataFormatada = `${dia}/${mes}/${ano}`;\n    }\n    const novaSolicitacao = {\n      id: Date.now(),\n      funcionarioId: userData.id,\n      funcionarioNome: userData.name,\n      data: dataFormatada,\n      tipoRegistro: dadosCorrecao.type || 'entrada',\n      horaOriginal: dadosCorrecao.originalTime || '--:--',\n      horaCorreta: dadosCorrecao.newTime,\n      motivo: dadosCorrecao.reason,\n      status: 'pendente',\n      dataSolicitacao: new Date().toLocaleDateString('pt-BR')\n    };\n    setSolicitacoesAjuste(prevSolicitacoes => [novaSolicitacao, ...prevSolicitacoes]);\n\n    // Criar notificação para o admin\n    const adminNotification = {\n      id: Date.now(),\n      message: `${userData.name} solicitou correção de ponto para ${dataFormatada}`,\n      date: new Date().toLocaleDateString('pt-BR'),\n      read: false\n    };\n    try {\n      const currentAdminNotifications = JSON.parse(localStorage.getItem('adminNotifications')) || [];\n      localStorage.setItem('adminNotifications', JSON.stringify([adminNotification, ...currentAdminNotifications]));\n    } catch (error) {\n      console.error('Erro ao salvar notificação do admin:', error);\n    }\n    return novaSolicitacao;\n  };\n\n  // Valores a serem disponibilizados através do Context\n  const value = {\n    userData,\n    setUserData,\n    timeEntries,\n    setTimeEntries,\n    solicitacoesAjuste,\n    setSolicitacoesAjuste,\n    enviarSolicitacaoCorrecao,\n    registrarPonto\n  };\n  return /*#__PURE__*/_jsxDEV(PontoContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 10\n  }, this);\n};\n_s2(PontoProvider, \"+C4FPY0UVgDR3LHXzh3Qgtul/Bo=\");\n_c = PontoProvider;\nexport default PontoProvider;\nvar _c;\n$RefreshReg$(_c, \"PontoProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","PontoContext","usePonto","_s","getInitials","name","nameParts","split","length","charAt","toUpperCase","PontoProvider","children","_s2","userData","setUserData","storedUser","JSON","parse","localStorage","getItem","id","email","initials","isAdmin","error","console","timeEntries","setTimeEntries","storedEntries","Array","isArray","solicitacoesAjuste","setSolicitacoesAjuste","setItem","stringify","registrarPonto","tipo","now","Date","newEntry","type","time","toLocaleTimeString","hour","minute","date","toLocaleDateString","user","status","employeeId","employeeName","registeredBy","prevEntries","adminNotification","message","read","currentAdminNotifications","enviarSolicitacaoCorrecao","dadosCorrecao","dataFormatada","includes","ano","mes","dia","novaSolicitacao","funcionarioId","funcionarioNome","data","tipoRegistro","horaOriginal","originalTime","horaCorreta","newTime","motivo","reason","dataSolicitacao","prevSolicitacoes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/context/PontoContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Criar o Context\r\nconst PontoContext = createContext();\r\n\r\n// Hook personalizado para facilitar o uso do contexto\r\nexport const usePonto = () => useContext(PontoContext);\r\n\r\n// Função auxiliar para pegar iniciais do nome\r\nfunction getInitials(name) {\r\n  if (!name) return 'U';\r\n  const nameParts = name.split(' ');\r\n  if (nameParts.length === 1) return nameParts[0].charAt(0).toUpperCase();\r\n  return (nameParts[0].charAt(0) + nameParts[nameParts.length - 1].charAt(0)).toUpperCase();\r\n}\r\n\r\n// Provider Component\r\nconst PontoProvider = ({ children }) => {\r\n  // Obter dados do usuário logado do localStorage\r\n  const [userData, setUserData] = useState(() => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('user')) || {};\r\n      return {\r\n        id: storedUser.id || 1,\r\n        name: storedUser.name || 'Usuário',\r\n        email: storedUser.email || '',\r\n        initials: getInitials(storedUser.name),\r\n        isAdmin: storedUser.isAdmin || false\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao carregar userData:', error);\r\n      return { id: 1, name: 'Usuário', email: '', initials: 'U', isAdmin: false };\r\n    }\r\n  });\r\n\r\n  // Registros de ponto\r\n  const [timeEntries, setTimeEntries] = useState(() => {\r\n    try {\r\n      const storedEntries = JSON.parse(localStorage.getItem('timeEntries')) || [];\r\n      return Array.isArray(storedEntries) ? storedEntries : [];\r\n    } catch (error) {\r\n      console.error('Erro ao carregar registros de ponto:', error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // Solicitações de ajuste\r\n  const [solicitacoesAjuste, setSolicitacoesAjuste] = useState(() => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('ajustePontoSolicitacoes')) || [];\r\n    } catch (error) {\r\n      console.error('Erro ao carregar solicitações de ajuste:', error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // Efeito para salvar timeEntries no localStorage\r\n  useEffect(() => {\r\n    if (timeEntries.length > 0) {\r\n      localStorage.setItem('timeEntries', JSON.stringify(timeEntries));\r\n    }\r\n  }, [timeEntries]);\r\n\r\n  // Efeito para salvar solicitações no localStorage\r\n  useEffect(() => {\r\n    if (solicitacoesAjuste.length > 0) {\r\n      localStorage.setItem('ajustePontoSolicitacoes', JSON.stringify(solicitacoesAjuste));\r\n    }\r\n  }, [solicitacoesAjuste]);\r\n\r\n  // Função para registrar entrada ou saída de ponto\r\n  const registrarPonto = (tipo) => {\r\n    const now = new Date();\r\n    const newEntry = {\r\n      type: tipo,\r\n      time: now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }),\r\n      date: now.toLocaleDateString('pt-BR'),\r\n      user: userData.name,\r\n      status: 'pendente',\r\n      employeeId: userData.id,\r\n      employeeName: userData.name,\r\n      registeredBy: userData.name\r\n    };\r\n\r\n    setTimeEntries((prevEntries) => [newEntry, ...prevEntries]);\r\n\r\n    // Criar notificação para o admin\r\n    const adminNotification = {\r\n      id: Date.now(),\r\n      message: `${userData.name} registrou ${tipo} às ${newEntry.time}`,\r\n      date: now.toLocaleDateString('pt-BR'),\r\n      read: false\r\n    };\r\n\r\n    try {\r\n      const currentAdminNotifications = JSON.parse(localStorage.getItem('adminNotifications')) || [];\r\n      localStorage.setItem('adminNotifications', JSON.stringify([adminNotification, ...currentAdminNotifications]));\r\n    } catch (error) {\r\n      console.error('Erro ao salvar notificação do admin:', error);\r\n    }\r\n\r\n    return newEntry;\r\n  };\r\n\r\n  // Função para enviar uma solicitação de correção\r\n  const enviarSolicitacaoCorrecao = (dadosCorrecao) => {\r\n    let dataFormatada = dadosCorrecao.date;\r\n    if (dadosCorrecao.date && dadosCorrecao.date.includes('-')) {\r\n      const [ano, mes, dia] = dadosCorrecao.date.split('-');\r\n      dataFormatada = `${dia}/${mes}/${ano}`;\r\n    }\r\n\r\n    const novaSolicitacao = {\r\n      id: Date.now(),\r\n      funcionarioId: userData.id,\r\n      funcionarioNome: userData.name,\r\n      data: dataFormatada,\r\n      tipoRegistro: dadosCorrecao.type || 'entrada',\r\n      horaOriginal: dadosCorrecao.originalTime || '--:--',\r\n      horaCorreta: dadosCorrecao.newTime,\r\n      motivo: dadosCorrecao.reason,\r\n      status: 'pendente',\r\n      dataSolicitacao: new Date().toLocaleDateString('pt-BR')\r\n    };\r\n\r\n    setSolicitacoesAjuste((prevSolicitacoes) => [novaSolicitacao, ...prevSolicitacoes]);\r\n\r\n    // Criar notificação para o admin\r\n    const adminNotification = {\r\n      id: Date.now(),\r\n      message: `${userData.name} solicitou correção de ponto para ${dataFormatada}`,\r\n      date: new Date().toLocaleDateString('pt-BR'),\r\n      read: false\r\n    };\r\n\r\n    try {\r\n      const currentAdminNotifications = JSON.parse(localStorage.getItem('adminNotifications')) || [];\r\n      localStorage.setItem('adminNotifications', JSON.stringify([adminNotification, ...currentAdminNotifications]));\r\n    } catch (error) {\r\n      console.error('Erro ao salvar notificação do admin:', error);\r\n    }\r\n\r\n    return novaSolicitacao;\r\n  };\r\n\r\n  // Valores a serem disponibilizados através do Context\r\n  const value = {\r\n    userData,\r\n    setUserData,\r\n    timeEntries,\r\n    setTimeEntries,\r\n    solicitacoesAjuste,\r\n    setSolicitacoesAjuste,\r\n    enviarSolicitacaoCorrecao,\r\n    registrarPonto\r\n  };\r\n\r\n  return <PontoContext.Provider value={value}>{children}</PontoContext.Provider>;\r\n};\r\n\r\nexport default PontoProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}