{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Criando o contexto de usuário\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\n// Criando o provider do contexto\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Estado para armazenar dados do usuário\n  const [userData, setUserData] = useState(() => {\n    // Inicializar com dados do localStorage, se disponíveis\n    const storedUser = localStorage.getItem('user');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n\n  // Estado para a lista de funcionários\n  const [funcionarios, setFuncionarios] = useState(() => {\n    const storedFuncionarios = localStorage.getItem('funcionarios');\n    return storedFuncionarios ? JSON.parse(storedFuncionarios) : [{\n      id: 101,\n      nome: 'João Silva'\n    }, {\n      id: 102,\n      nome: 'Maria Oliveira'\n    }, {\n      id: 103,\n      nome: 'Carlos Pereira'\n    }, {\n      id: 104,\n      nome: 'Ana Souza'\n    }, {\n      id: 105,\n      nome: 'Pedro Santos'\n    }];\n  });\n\n  // Estado para forçar atualizações de componentes que dependem dos funcionários\n  const [updateCounter, setUpdateCounter] = useState(0);\n\n  // Atualizar o localStorage quando userData mudar\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('user', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Atualizar o localStorage quando a lista de funcionários mudar\n  useEffect(() => {\n    console.log(\"Funcionários atualizados no Context:\", funcionarios);\n    localStorage.setItem('funcionarios', JSON.stringify(funcionarios));\n  }, [funcionarios]);\n\n  // Função para adicionar novo funcionário (corrigida para evitar duplicatas)\n  const addFuncionario = newFuncionario => {\n    console.log(\"Tentando adicionar funcionário:\", newFuncionario);\n    return new Promise(resolve => {\n      setFuncionarios(prevFuncionarios => {\n        // Verificar se o funcionário já existe pelo ID\n        const existsById = prevFuncionarios.some(f => f.id === newFuncionario.id);\n\n        // Verificar se o nome já existe\n        const existsByName = prevFuncionarios.some(f => f.nome.toLowerCase() === newFuncionario.nome.toLowerCase() && f.id !== newFuncionario.id);\n\n        // Se já existe, não modificar a lista\n        if (existsById) {\n          console.log(\"Funcionário já existe (ID):\", newFuncionario.id);\n          resolve(prevFuncionarios);\n          return prevFuncionarios;\n        }\n\n        // Se o nome existir, adicionar um sufixo\n        let finalNome = newFuncionario.nome;\n        if (existsByName) {\n          finalNome = `${newFuncionario.nome} (${prevFuncionarios.length + 1})`;\n          console.log(\"Nome modificado para evitar duplicação:\", finalNome);\n        }\n\n        // Criar objeto com nome potencialmente modificado\n        const funcionarioToAdd = {\n          ...newFuncionario,\n          nome: finalNome\n        };\n\n        // Adicionar notificação para o admin\n        const adminNotifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');\n        adminNotifications.push({\n          id: Date.now(),\n          type: 'novoFuncionario',\n          message: `Novo funcionário registrado: ${funcionarioToAdd.nome}`,\n          date: new Date().toLocaleDateString('pt-BR'),\n          read: false\n        });\n        localStorage.setItem('adminNotifications', JSON.stringify(adminNotifications));\n\n        // Criar e retornar nova lista\n        const updatedList = [...prevFuncionarios, funcionarioToAdd];\n\n        // Atualizar localStorage imediatamente para garantir sincronização\n        localStorage.setItem('funcionarios', JSON.stringify(updatedList));\n        console.log(\"Lista atualizada de funcionários:\", updatedList);\n\n        // Incrementar contador para forçar atualização em componentes dependentes\n        setUpdateCounter(prev => prev + 1);\n        resolve(updatedList);\n        return updatedList;\n      });\n    });\n  };\n\n  // Função para obter a lista atualizada de funcionários do localStorage\n  const refreshFuncionarios = () => {\n    console.log(\"Atualizando lista de funcionários...\");\n    const storedFuncionarios = localStorage.getItem('funcionarios');\n    if (storedFuncionarios) {\n      const parsedFuncionarios = JSON.parse(storedFuncionarios);\n      console.log(\"Funcionários carregados do localStorage:\", parsedFuncionarios);\n      setFuncionarios(parsedFuncionarios);\n      // Incrementar contador para forçar atualizações\n      setUpdateCounter(prev => prev + 1);\n    }\n  };\n\n  // Função para login\n  const login = user => {\n    setUserData(user);\n\n    // Atualizar lista de funcionários ao fazer login\n    refreshFuncionarios();\n  };\n\n  // Função para logout\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUserData(null);\n  };\n\n  // Valor do Provider com todas as funções e estados\n  const contextValue = {\n    userData,\n    login,\n    logout,\n    funcionarios,\n    setFuncionarios,\n    addFuncionario,\n    refreshFuncionarios,\n    updateCounter\n  };\n  console.log(\"Context Provider renderizado com funcionários:\", funcionarios);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para facilitar o uso do contexto\n_s(UserProvider, \"DXKfG9c1+4Ojn34dH9rjtORTIHA=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUser deve ser usado dentro de um UserProvider\");\n  }\n  return context;\n};\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","userData","setUserData","storedUser","localStorage","getItem","JSON","parse","funcionarios","setFuncionarios","storedFuncionarios","id","nome","updateCounter","setUpdateCounter","setItem","stringify","console","log","addFuncionario","newFuncionario","Promise","resolve","prevFuncionarios","existsById","some","f","existsByName","toLowerCase","finalNome","length","funcionarioToAdd","adminNotifications","push","Date","now","type","message","date","toLocaleDateString","read","updatedList","prev","refreshFuncionarios","parsedFuncionarios","login","user","logout","removeItem","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Criando o contexto de usuário\r\nexport const UserContext = createContext();\r\n\r\n// Criando o provider do contexto\r\nexport const UserProvider = ({ children }) => {\r\n  // Estado para armazenar dados do usuário\r\n  const [userData, setUserData] = useState(() => {\r\n    // Inicializar com dados do localStorage, se disponíveis\r\n    const storedUser = localStorage.getItem('user');\r\n    return storedUser ? JSON.parse(storedUser) : null;\r\n  });\r\n\r\n  // Estado para a lista de funcionários\r\n  const [funcionarios, setFuncionarios] = useState(() => {\r\n    const storedFuncionarios = localStorage.getItem('funcionarios');\r\n    return storedFuncionarios ? JSON.parse(storedFuncionarios) : [\r\n      { id: 101, nome: 'João Silva' },\r\n      { id: 102, nome: 'Maria Oliveira' },\r\n      { id: 103, nome: 'Carlos Pereira' },\r\n      { id: 104, nome: 'Ana Souza' },\r\n      { id: 105, nome: 'Pedro Santos' }\r\n    ];\r\n  });\r\n  \r\n  // Estado para forçar atualizações de componentes que dependem dos funcionários\r\n  const [updateCounter, setUpdateCounter] = useState(0);\r\n\r\n  // Atualizar o localStorage quando userData mudar\r\n  useEffect(() => {\r\n    if (userData) {\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n    }\r\n  }, [userData]);\r\n\r\n  // Atualizar o localStorage quando a lista de funcionários mudar\r\n  useEffect(() => {\r\n    console.log(\"Funcionários atualizados no Context:\", funcionarios);\r\n    localStorage.setItem('funcionarios', JSON.stringify(funcionarios));\r\n  }, [funcionarios]);\r\n\r\n  // Função para adicionar novo funcionário (corrigida para evitar duplicatas)\r\n  const addFuncionario = (newFuncionario) => {\r\n    console.log(\"Tentando adicionar funcionário:\", newFuncionario);\r\n    \r\n    return new Promise((resolve) => {\r\n      setFuncionarios(prevFuncionarios => {\r\n        // Verificar se o funcionário já existe pelo ID\r\n        const existsById = prevFuncionarios.some(f => f.id === newFuncionario.id);\r\n        \r\n        // Verificar se o nome já existe\r\n        const existsByName = prevFuncionarios.some(f => \r\n          f.nome.toLowerCase() === newFuncionario.nome.toLowerCase() && f.id !== newFuncionario.id\r\n        );\r\n        \r\n        // Se já existe, não modificar a lista\r\n        if (existsById) {\r\n          console.log(\"Funcionário já existe (ID):\", newFuncionario.id);\r\n          resolve(prevFuncionarios);\r\n          return prevFuncionarios;\r\n        }\r\n        \r\n        // Se o nome existir, adicionar um sufixo\r\n        let finalNome = newFuncionario.nome;\r\n        if (existsByName) {\r\n          finalNome = `${newFuncionario.nome} (${prevFuncionarios.length + 1})`;\r\n          console.log(\"Nome modificado para evitar duplicação:\", finalNome);\r\n        }\r\n        \r\n        // Criar objeto com nome potencialmente modificado\r\n        const funcionarioToAdd = {\r\n          ...newFuncionario,\r\n          nome: finalNome\r\n        };\r\n        \r\n        // Adicionar notificação para o admin\r\n        const adminNotifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');\r\n        adminNotifications.push({\r\n          id: Date.now(),\r\n          type: 'novoFuncionario',\r\n          message: `Novo funcionário registrado: ${funcionarioToAdd.nome}`,\r\n          date: new Date().toLocaleDateString('pt-BR'),\r\n          read: false\r\n        });\r\n        localStorage.setItem('adminNotifications', JSON.stringify(adminNotifications));\r\n        \r\n        // Criar e retornar nova lista\r\n        const updatedList = [...prevFuncionarios, funcionarioToAdd];\r\n        \r\n        // Atualizar localStorage imediatamente para garantir sincronização\r\n        localStorage.setItem('funcionarios', JSON.stringify(updatedList));\r\n        console.log(\"Lista atualizada de funcionários:\", updatedList);\r\n        \r\n        // Incrementar contador para forçar atualização em componentes dependentes\r\n        setUpdateCounter(prev => prev + 1);\r\n        \r\n        resolve(updatedList);\r\n        return updatedList;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Função para obter a lista atualizada de funcionários do localStorage\r\n  const refreshFuncionarios = () => {\r\n    console.log(\"Atualizando lista de funcionários...\");\r\n    const storedFuncionarios = localStorage.getItem('funcionarios');\r\n    if (storedFuncionarios) {\r\n      const parsedFuncionarios = JSON.parse(storedFuncionarios);\r\n      console.log(\"Funcionários carregados do localStorage:\", parsedFuncionarios);\r\n      setFuncionarios(parsedFuncionarios);\r\n      // Incrementar contador para forçar atualizações\r\n      setUpdateCounter(prev => prev + 1);\r\n    }\r\n  };\r\n\r\n  // Função para login\r\n  const login = (user) => {\r\n    setUserData(user);\r\n    \r\n    // Atualizar lista de funcionários ao fazer login\r\n    refreshFuncionarios();\r\n  };\r\n\r\n  // Função para logout\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setUserData(null);\r\n  };\r\n\r\n  // Valor do Provider com todas as funções e estados\r\n  const contextValue = {\r\n    userData, \r\n    login, \r\n    logout, \r\n    funcionarios, \r\n    setFuncionarios,\r\n    addFuncionario,\r\n    refreshFuncionarios,\r\n    updateCounter\r\n  };\r\n  \r\n  console.log(\"Context Provider renderizado com funcionários:\", funcionarios);\r\n\r\n  return (\r\n    <UserContext.Provider value={contextValue}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para facilitar o uso do contexto\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error(\"useUser deve ser usado dentro de um UserProvider\");\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}