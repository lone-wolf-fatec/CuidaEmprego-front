{"ast":null,"code":"// Serviço para gerenciar jornadas de trabalho\nconst JornadasService = {\n  // Obter todas as jornadas\n  getTodasJornadas: () => {\n    const storedJornadas = localStorage.getItem('jornadas');\n    if (storedJornadas) {\n      return JSON.parse(storedJornadas);\n    }\n\n    // Dados iniciais se não houver no localStorage\n    const jornadasIniciais = [{\n      id: 1,\n      nome: 'Padrão',\n      descricao: 'Jornada padrão de 8 horas diárias',\n      horaInicio: '08:00',\n      horaFim: '17:00',\n      intervaloInicio: '12:00',\n      intervaloFim: '13:00',\n      diasTrabalho: [1, 2, 3, 4, 5],\n      // Segunda a sexta\n      cargaHorariaSemanal: 40,\n      toleranciaEntrada: 10,\n      // minutos\n      toleranciaSaida: 10,\n      // minutos\n      ativo: true\n    }, {\n      id: 2,\n      nome: 'Meio período - Manhã',\n      descricao: 'Jornada de meio período matutino',\n      horaInicio: '08:00',\n      horaFim: '12:00',\n      intervaloInicio: null,\n      intervaloFim: null,\n      diasTrabalho: [1, 2, 3, 4, 5],\n      // Segunda a sexta\n      cargaHorariaSemanal: 20,\n      toleranciaEntrada: 10,\n      toleranciaSaida: 10,\n      ativo: true\n    }, {\n      id: 3,\n      nome: 'Meio período - Tarde',\n      descricao: 'Jornada de meio período vespertino',\n      horaInicio: '13:00',\n      horaFim: '17:00',\n      intervaloInicio: null,\n      intervaloFim: null,\n      diasTrabalho: [1, 2, 3, 4, 5],\n      // Segunda a sexta\n      cargaHorariaSemanal: 20,\n      toleranciaEntrada: 10,\n      toleranciaSaida: 10,\n      ativo: true\n    }, {\n      id: 4,\n      nome: 'Escala 6x1',\n      descricao: 'Trabalho de segunda a sábado',\n      horaInicio: '08:00',\n      horaFim: '16:20',\n      intervaloInicio: '12:00',\n      intervaloFim: '13:00',\n      diasTrabalho: [1, 2, 3, 4, 5, 6],\n      // Segunda a sábado\n      cargaHorariaSemanal: 44,\n      toleranciaEntrada: 10,\n      toleranciaSaida: 10,\n      ativo: true\n    }, {\n      id: 5,\n      nome: 'Escala 12x36',\n      descricao: 'Trabalho 12 horas e folga 36 horas',\n      horaInicio: '07:00',\n      horaFim: '19:00',\n      intervaloInicio: '12:00',\n      intervaloFim: '13:00',\n      diasTrabalho: [],\n      // Escala especial\n      cargaHorariaSemanal: 36,\n      toleranciaEntrada: 15,\n      toleranciaSaida: 15,\n      ativo: true,\n      escalaEspecial: true\n    }];\n    localStorage.setItem('jornadas', JSON.stringify(jornadasIniciais));\n    return jornadasIniciais;\n  },\n  // Criar nova jornada\n  criarJornada: jornada => {\n    const jornadas = JornadasService.getTodasJornadas();\n\n    // Gerar ID único baseado no timestamp\n    const novaJornada = {\n      ...jornada,\n      id: Date.now()\n    };\n    const jornadasAtualizadas = [...jornadas, novaJornada];\n    localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\n    return novaJornada;\n  },\n  // Atualizar jornada existente\n  atualizarJornada: jornada => {\n    const jornadas = JornadasService.getTodasJornadas();\n    const jornadasAtualizadas = jornadas.map(j => j.id === jornada.id ? jornada : j);\n    localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\n    return jornada;\n  },\n  // Excluir jornada\n  excluirJornada: jornadaId => {\n    const jornadas = JornadasService.getTodasJornadas();\n    const jornadasAtualizadas = jornadas.filter(j => j.id !== jornadaId);\n    localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\n    return jornadasAtualizadas;\n  },\n  // Ativar/desativar jornada\n  alternarStatusJornada: jornadaId => {\n    const jornadas = JornadasService.getTodasJornadas();\n    const jornadasAtualizadas = jornadas.map(jornada => {\n      if (jornada.id === jornadaId) {\n        return {\n          ...jornada,\n          ativo: !jornada.ativo\n        };\n      }\n      return jornada;\n    });\n    localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\n    return jornadasAtualizadas;\n  },\n  // Obter jornada pelo ID\n  getJornadaPorId: jornadaId => {\n    const jornadas = JornadasService.getTodasJornadas();\n    return jornadas.find(j => j.id === jornadaId);\n  },\n  // Verificar se jornada tem funcionários\n  jornadaTemFuncionarios: jornadaId => {\n    const funcionariosPorJornada = JSON.parse(localStorage.getItem('funcionariosPorJornada') || '{}');\n    return funcionariosPorJornada[jornadaId] && funcionariosPorJornada[jornadaId].length > 0;\n  },\n  // Formatar dias de trabalho para exibição amigável\n  formatarDiasTrabalho: dias => {\n    const nomeDias = {\n      0: 'Dom',\n      1: 'Seg',\n      2: 'Ter',\n      3: 'Qua',\n      4: 'Qui',\n      5: 'Sex',\n      6: 'Sáb'\n    };\n    if (dias.length === 0) return 'Escala especial';\n    if (dias.length === 7) return 'Todos os dias';\n    if (dias.length === 5 && dias.includes(1) && dias.includes(2) && dias.includes(3) && dias.includes(4) && dias.includes(5)) {\n      return 'Segunda a Sexta';\n    }\n    if (dias.length === 6 && dias.includes(1) && dias.includes(2) && dias.includes(3) && dias.includes(4) && dias.includes(5) && dias.includes(6)) {\n      return 'Segunda a Sábado';\n    }\n    return dias.map(dia => nomeDias[dia]).join(', ');\n  },\n  // Calcular carga horária diária\n  calcularHorasDiarias: jornada => {\n    const inicio = jornada.horaInicio.split(':');\n    const fim = jornada.horaFim.split(':');\n    let horasInicio = parseInt(inicio[0]);\n    let minutosInicio = parseInt(inicio[1]);\n    let horasFim = parseInt(fim[0]);\n    let minutosFim = parseInt(fim[1]);\n\n    // Converter para minutos totais\n    const inicioMinutos = horasInicio * 60 + minutosInicio;\n    const fimMinutos = horasFim * 60 + minutosFim;\n\n    // Calcular diferença em minutos\n    let diferencaMinutos = fimMinutos - inicioMinutos;\n\n    // Se fim < início, assumimos que passou da meia-noite\n    if (diferencaMinutos < 0) {\n      diferencaMinutos += 24 * 60;\n    }\n\n    // Subtrair intervalo se existir\n    if (jornada.intervaloInicio && jornada.intervaloFim) {\n      const inicioIntervalo = jornada.intervaloInicio.split(':');\n      const fimIntervalo = jornada.intervaloFim.split(':');\n      const intervaloInicio = parseInt(inicioIntervalo[0]) * 60 + parseInt(inicioIntervalo[1]);\n      const intervaloFim = parseInt(fimIntervalo[0]) * 60 + parseInt(fimIntervalo[1]);\n      diferencaMinutos -= intervaloFim - intervaloInicio;\n    }\n\n    // Retornar horas em formato decimal\n    return diferencaMinutos / 60;\n  },\n  // Calcular carga horária semanal\n  calcularCargaHorariaSemanal: jornada => {\n    if (jornada.escalaEspecial) {\n      return jornada.cargaHorariaSemanal;\n    }\n    const horasDiarias = JornadasService.calcularHorasDiarias(jornada);\n    return Math.round(horasDiarias * jornada.diasTrabalho.length * 100) / 100;\n  },\n  // Verificar se o dia atual é dia de trabalho para a jornada\n  ehDiaDeTrabalho: jornada => {\n    if (jornada.escalaEspecial) {\n      // Para escalas especiais, seria necessário um algoritmo específico\n      // Vamos assumir que sim para simplificar\n      return true;\n    }\n    const hoje = new Date().getDay(); // 0-6 (Domingo-Sábado)\n    return jornada.diasTrabalho.includes(hoje);\n  },\n  // Verificar tolerância de entrada\n  verificarToleranciaEntrada: (jornada, horario = new Date()) => {\n    if (!jornada.ativo) return false;\n    const [horaJornada, minutoJornada] = jornada.horaInicio.split(':').map(Number);\n\n    // Criar data com horário de início da jornada\n    const horaInicio = new Date();\n    horaInicio.setHours(horaJornada, minutoJornada, 0, 0);\n\n    // Adicionar tolerância\n    const horaLimite = new Date(horaInicio);\n    horaLimite.setMinutes(horaLimite.getMinutes() + jornada.toleranciaEntrada);\n\n    // Verificar se o horário está dentro da tolerância\n    return horario <= horaLimite;\n  },\n  // Verificar tolerância de saída\n  verificarToleranciaSaida: (jornada, horario = new Date()) => {\n    if (!jornada.ativo) return false;\n    const [horaJornada, minutoJornada] = jornada.horaFim.split(':').map(Number);\n\n    // Criar data com horário de fim da jornada\n    const horaFim = new Date();\n    horaFim.setHours(horaJornada, minutoJornada, 0, 0);\n\n    // Subtrair tolerância\n    const horaLimite = new Date(horaFim);\n    horaLimite.setMinutes(horaLimite.getMinutes() - jornada.toleranciaSaida);\n\n    // Verificar se o horário está dentro da tolerância\n    return horario >= horaLimite;\n  }\n};\nexport default JornadasService;","map":{"version":3,"names":["JornadasService","getTodasJornadas","storedJornadas","localStorage","getItem","JSON","parse","jornadasIniciais","id","nome","descricao","horaInicio","horaFim","intervaloInicio","intervaloFim","diasTrabalho","cargaHorariaSemanal","toleranciaEntrada","toleranciaSaida","ativo","escalaEspecial","setItem","stringify","criarJornada","jornada","jornadas","novaJornada","Date","now","jornadasAtualizadas","atualizarJornada","map","j","excluirJornada","jornadaId","filter","alternarStatusJornada","getJornadaPorId","find","jornadaTemFuncionarios","funcionariosPorJornada","length","formatarDiasTrabalho","dias","nomeDias","includes","dia","join","calcularHorasDiarias","inicio","split","fim","horasInicio","parseInt","minutosInicio","horasFim","minutosFim","inicioMinutos","fimMinutos","diferencaMinutos","inicioIntervalo","fimIntervalo","calcularCargaHorariaSemanal","horasDiarias","Math","round","ehDiaDeTrabalho","hoje","getDay","verificarToleranciaEntrada","horario","horaJornada","minutoJornada","Number","setHours","horaLimite","setMinutes","getMinutes","verificarToleranciaSaida"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/components/JornadasService.js"],"sourcesContent":["// Serviço para gerenciar jornadas de trabalho\r\nconst JornadasService = {\r\n    // Obter todas as jornadas\r\n    getTodasJornadas: () => {\r\n      const storedJornadas = localStorage.getItem('jornadas');\r\n      if (storedJornadas) {\r\n        return JSON.parse(storedJornadas);\r\n      }\r\n      \r\n      // Dados iniciais se não houver no localStorage\r\n      const jornadasIniciais = [\r\n        {\r\n          id: 1,\r\n          nome: 'Padrão',\r\n          descricao: 'Jornada padrão de 8 horas diárias',\r\n          horaInicio: '08:00',\r\n          horaFim: '17:00',\r\n          intervaloInicio: '12:00',\r\n          intervaloFim: '13:00',\r\n          diasTrabalho: [1, 2, 3, 4, 5], // Segunda a sexta\r\n          cargaHorariaSemanal: 40,\r\n          toleranciaEntrada: 10, // minutos\r\n          toleranciaSaida: 10, // minutos\r\n          ativo: true\r\n        },\r\n        {\r\n          id: 2,\r\n          nome: 'Meio período - Manhã',\r\n          descricao: 'Jornada de meio período matutino',\r\n          horaInicio: '08:00',\r\n          horaFim: '12:00',\r\n          intervaloInicio: null,\r\n          intervaloFim: null,\r\n          diasTrabalho: [1, 2, 3, 4, 5], // Segunda a sexta\r\n          cargaHorariaSemanal: 20,\r\n          toleranciaEntrada: 10,\r\n          toleranciaSaida: 10,\r\n          ativo: true\r\n        },\r\n        {\r\n          id: 3,\r\n          nome: 'Meio período - Tarde',\r\n          descricao: 'Jornada de meio período vespertino',\r\n          horaInicio: '13:00',\r\n          horaFim: '17:00',\r\n          intervaloInicio: null,\r\n          intervaloFim: null,\r\n          diasTrabalho: [1, 2, 3, 4, 5], // Segunda a sexta\r\n          cargaHorariaSemanal: 20,\r\n          toleranciaEntrada: 10,\r\n          toleranciaSaida: 10,\r\n          ativo: true\r\n        },\r\n        {\r\n          id: 4,\r\n          nome: 'Escala 6x1',\r\n          descricao: 'Trabalho de segunda a sábado',\r\n          horaInicio: '08:00',\r\n          horaFim: '16:20',\r\n          intervaloInicio: '12:00',\r\n          intervaloFim: '13:00',\r\n          diasTrabalho: [1, 2, 3, 4, 5, 6], // Segunda a sábado\r\n          cargaHorariaSemanal: 44,\r\n          toleranciaEntrada: 10,\r\n          toleranciaSaida: 10,\r\n          ativo: true\r\n        },\r\n        {\r\n          id: 5,\r\n          nome: 'Escala 12x36',\r\n          descricao: 'Trabalho 12 horas e folga 36 horas',\r\n          horaInicio: '07:00',\r\n          horaFim: '19:00',\r\n          intervaloInicio: '12:00',\r\n          intervaloFim: '13:00',\r\n          diasTrabalho: [], // Escala especial\r\n          cargaHorariaSemanal: 36,\r\n          toleranciaEntrada: 15,\r\n          toleranciaSaida: 15,\r\n          ativo: true,\r\n          escalaEspecial: true\r\n        }\r\n      ];\r\n      \r\n      localStorage.setItem('jornadas', JSON.stringify(jornadasIniciais));\r\n      return jornadasIniciais;\r\n    },\r\n    \r\n    // Criar nova jornada\r\n    criarJornada: (jornada) => {\r\n      const jornadas = JornadasService.getTodasJornadas();\r\n      \r\n      // Gerar ID único baseado no timestamp\r\n      const novaJornada = {\r\n        ...jornada,\r\n        id: Date.now()\r\n      };\r\n      \r\n      const jornadasAtualizadas = [...jornadas, novaJornada];\r\n      localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\r\n      \r\n      return novaJornada;\r\n    },\r\n    \r\n    // Atualizar jornada existente\r\n    atualizarJornada: (jornada) => {\r\n      const jornadas = JornadasService.getTodasJornadas();\r\n      \r\n      const jornadasAtualizadas = jornadas.map(j => \r\n        j.id === jornada.id ? jornada : j\r\n      );\r\n      \r\n      localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\r\n      \r\n      return jornada;\r\n    },\r\n    \r\n    // Excluir jornada\r\n    excluirJornada: (jornadaId) => {\r\n      const jornadas = JornadasService.getTodasJornadas();\r\n      \r\n      const jornadasAtualizadas = jornadas.filter(j => j.id !== jornadaId);\r\n      localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\r\n      \r\n      return jornadasAtualizadas;\r\n    },\r\n    \r\n    // Ativar/desativar jornada\r\n    alternarStatusJornada: (jornadaId) => {\r\n      const jornadas = JornadasService.getTodasJornadas();\r\n      \r\n      const jornadasAtualizadas = jornadas.map(jornada => {\r\n        if (jornada.id === jornadaId) {\r\n          return { ...jornada, ativo: !jornada.ativo };\r\n        }\r\n        return jornada;\r\n      });\r\n      \r\n      localStorage.setItem('jornadas', JSON.stringify(jornadasAtualizadas));\r\n      \r\n      return jornadasAtualizadas;\r\n    },\r\n    \r\n    // Obter jornada pelo ID\r\n    getJornadaPorId: (jornadaId) => {\r\n      const jornadas = JornadasService.getTodasJornadas();\r\n      return jornadas.find(j => j.id === jornadaId);\r\n    },\r\n    \r\n    // Verificar se jornada tem funcionários\r\n    jornadaTemFuncionarios: (jornadaId) => {\r\n      const funcionariosPorJornada = JSON.parse(localStorage.getItem('funcionariosPorJornada') || '{}');\r\n      return funcionariosPorJornada[jornadaId] && funcionariosPorJornada[jornadaId].length > 0;\r\n    },\r\n    \r\n    // Formatar dias de trabalho para exibição amigável\r\n    formatarDiasTrabalho: (dias) => {\r\n      const nomeDias = {\r\n        0: 'Dom',\r\n        1: 'Seg',\r\n        2: 'Ter',\r\n        3: 'Qua',\r\n        4: 'Qui',\r\n        5: 'Sex',\r\n        6: 'Sáb'\r\n      };\r\n      \r\n      if (dias.length === 0) return 'Escala especial';\r\n      if (dias.length === 7) return 'Todos os dias';\r\n      \r\n      if (dias.length === 5 && dias.includes(1) && dias.includes(2) && \r\n          dias.includes(3) && dias.includes(4) && dias.includes(5)) {\r\n        return 'Segunda a Sexta';\r\n      }\r\n      \r\n      if (dias.length === 6 && dias.includes(1) && dias.includes(2) && \r\n          dias.includes(3) && dias.includes(4) && dias.includes(5) && dias.includes(6)) {\r\n        return 'Segunda a Sábado';\r\n      }\r\n      \r\n      return dias.map(dia => nomeDias[dia]).join(', ');\r\n    },\r\n    \r\n    // Calcular carga horária diária\r\n    calcularHorasDiarias: (jornada) => {\r\n      const inicio = jornada.horaInicio.split(':');\r\n      const fim = jornada.horaFim.split(':');\r\n      \r\n      let horasInicio = parseInt(inicio[0]);\r\n      let minutosInicio = parseInt(inicio[1]);\r\n      let horasFim = parseInt(fim[0]);\r\n      let minutosFim = parseInt(fim[1]);\r\n      \r\n      // Converter para minutos totais\r\n      const inicioMinutos = horasInicio * 60 + minutosInicio;\r\n      const fimMinutos = horasFim * 60 + minutosFim;\r\n      \r\n      // Calcular diferença em minutos\r\n      let diferencaMinutos = fimMinutos - inicioMinutos;\r\n      \r\n      // Se fim < início, assumimos que passou da meia-noite\r\n      if (diferencaMinutos < 0) {\r\n        diferencaMinutos += 24 * 60;\r\n      }\r\n      \r\n      // Subtrair intervalo se existir\r\n      if (jornada.intervaloInicio && jornada.intervaloFim) {\r\n        const inicioIntervalo = jornada.intervaloInicio.split(':');\r\n        const fimIntervalo = jornada.intervaloFim.split(':');\r\n        \r\n        const intervaloInicio = parseInt(inicioIntervalo[0]) * 60 + parseInt(inicioIntervalo[1]);\r\n        const intervaloFim = parseInt(fimIntervalo[0]) * 60 + parseInt(fimIntervalo[1]);\r\n        \r\n        diferencaMinutos -= (intervaloFim - intervaloInicio);\r\n      }\r\n      \r\n      // Retornar horas em formato decimal\r\n      return diferencaMinutos / 60;\r\n    },\r\n    \r\n    // Calcular carga horária semanal\r\n    calcularCargaHorariaSemanal: (jornada) => {\r\n      if (jornada.escalaEspecial) {\r\n        return jornada.cargaHorariaSemanal;\r\n      }\r\n      \r\n      const horasDiarias = JornadasService.calcularHorasDiarias(jornada);\r\n      return Math.round(horasDiarias * jornada.diasTrabalho.length * 100) / 100;\r\n    },\r\n    \r\n    // Verificar se o dia atual é dia de trabalho para a jornada\r\n    ehDiaDeTrabalho: (jornada) => {\r\n      if (jornada.escalaEspecial) {\r\n        // Para escalas especiais, seria necessário um algoritmo específico\r\n        // Vamos assumir que sim para simplificar\r\n        return true;\r\n      }\r\n      \r\n      const hoje = new Date().getDay(); // 0-6 (Domingo-Sábado)\r\n      return jornada.diasTrabalho.includes(hoje);\r\n    },\r\n    \r\n    // Verificar tolerância de entrada\r\n    verificarToleranciaEntrada: (jornada, horario = new Date()) => {\r\n      if (!jornada.ativo) return false;\r\n      \r\n      const [horaJornada, minutoJornada] = jornada.horaInicio.split(':').map(Number);\r\n      \r\n      // Criar data com horário de início da jornada\r\n      const horaInicio = new Date();\r\n      horaInicio.setHours(horaJornada, minutoJornada, 0, 0);\r\n      \r\n      // Adicionar tolerância\r\n      const horaLimite = new Date(horaInicio);\r\n      horaLimite.setMinutes(horaLimite.getMinutes() + jornada.toleranciaEntrada);\r\n      \r\n      // Verificar se o horário está dentro da tolerância\r\n      return horario <= horaLimite;\r\n    },\r\n    \r\n    // Verificar tolerância de saída\r\n    verificarToleranciaSaida: (jornada, horario = new Date()) => {\r\n      if (!jornada.ativo) return false;\r\n      \r\n      const [horaJornada, minutoJornada] = jornada.horaFim.split(':').map(Number);\r\n      \r\n      // Criar data com horário de fim da jornada\r\n      const horaFim = new Date();\r\n      horaFim.setHours(horaJornada, minutoJornada, 0, 0);\r\n      \r\n      // Subtrair tolerância\r\n      const horaLimite = new Date(horaFim);\r\n      horaLimite.setMinutes(horaLimite.getMinutes() - jornada.toleranciaSaida);\r\n      \r\n      // Verificar se o horário está dentro da tolerância\r\n      return horario >= horaLimite;\r\n    }\r\n  };\r\n  \r\n  export default JornadasService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}