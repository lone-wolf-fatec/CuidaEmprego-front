{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\Desktop\\\\API SOZINHO 2\\\\alone-front\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Criando o contexto de usuário\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\n// Criando o provider do contexto\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Estado para armazenar dados do usuário\n  const [userData, setUserData] = useState(() => {\n    // Inicializar com dados do localStorage, se disponíveis\n    const storedUser = localStorage.getItem('user');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n\n  // Estado para a lista de funcionários\n  const [funcionarios, setFuncionarios] = useState(() => {\n    const storedFuncionarios = localStorage.getItem('funcionarios');\n    return storedFuncionarios ? JSON.parse(storedFuncionarios) : [{\n      id: 101,\n      nome: 'João Silva'\n    }, {\n      id: 102,\n      nome: 'Maria Oliveira'\n    }, {\n      id: 103,\n      nome: 'Carlos Pereira'\n    }, {\n      id: 104,\n      nome: 'Ana Souza'\n    }, {\n      id: 105,\n      nome: 'Pedro Santos'\n    }];\n  });\n\n  // Atualizar o localStorage quando userData mudar\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('user', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Atualizar o localStorage quando a lista de funcionários mudar\n  useEffect(() => {\n    localStorage.setItem('funcionarios', JSON.stringify(funcionarios));\n  }, [funcionarios]);\n\n  // Função para adicionar novo funcionário (corrigida para evitar duplicatas)\n  const addFuncionario = newFuncionario => {\n    return new Promise(resolve => {\n      setFuncionarios(prevFuncionarios => {\n        // Verificar se o funcionário já existe pelo ID\n        const existsById = prevFuncionarios.some(f => f.id === newFuncionario.id);\n\n        // Verificar se o nome já existe\n        const existsByName = prevFuncionarios.some(f => f.nome.toLowerCase() === newFuncionario.nome.toLowerCase() && f.id !== newFuncionario.id);\n\n        // Se já existe, não modificar a lista\n        if (existsById) {\n          resolve(prevFuncionarios);\n          return prevFuncionarios;\n        }\n\n        // Se o nome existir, adicionar um sufixo\n        let finalNome = newFuncionario.nome;\n        if (existsByName) {\n          finalNome = `${newFuncionario.nome} (${prevFuncionarios.length + 1})`;\n        }\n\n        // Criar objeto com nome potencialmente modificado\n        const funcionarioToAdd = {\n          ...newFuncionario,\n          nome: finalNome\n        };\n\n        // Adicionar notificação para o admin\n        const adminNotifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');\n        adminNotifications.push({\n          id: Date.now(),\n          type: 'novoFuncionario',\n          message: `Novo funcionário registrado: ${funcionarioToAdd.nome}`,\n          date: new Date().toLocaleDateString('pt-BR'),\n          read: false\n        });\n        localStorage.setItem('adminNotifications', JSON.stringify(adminNotifications));\n\n        // Criar e retornar nova lista\n        const updatedList = [...prevFuncionarios, funcionarioToAdd];\n\n        // Atualizar localStorage imediatamente para garantir sincronização\n        localStorage.setItem('funcionarios', JSON.stringify(updatedList));\n        resolve(updatedList);\n        return updatedList;\n      });\n    });\n  };\n\n  // Função para obter a lista atualizada de funcionários do localStorage\n  const refreshFuncionarios = () => {\n    const storedFuncionarios = localStorage.getItem('funcionarios');\n    if (storedFuncionarios) {\n      const parsedFuncionarios = JSON.parse(storedFuncionarios);\n      setFuncionarios(parsedFuncionarios);\n    }\n  };\n\n  // Função para login\n  const login = user => {\n    setUserData(user);\n\n    // Atualizar lista de funcionários ao fazer login\n    refreshFuncionarios();\n  };\n\n  // Função para logout\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUserData(null);\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userData,\n      login,\n      logout,\n      funcionarios,\n      setFuncionarios,\n      addFuncionario,\n      refreshFuncionarios\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para facilitar o uso do contexto\n_s(UserProvider, \"pJU7Tbtqxmo1KwrrDeIgom4zhHc=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error(\"useUser deve ser usado dentro de um UserProvider\");\n  }\n  return context;\n};\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","userData","setUserData","storedUser","localStorage","getItem","JSON","parse","funcionarios","setFuncionarios","storedFuncionarios","id","nome","setItem","stringify","addFuncionario","newFuncionario","Promise","resolve","prevFuncionarios","existsById","some","f","existsByName","toLowerCase","finalNome","length","funcionarioToAdd","adminNotifications","push","Date","now","type","message","date","toLocaleDateString","read","updatedList","refreshFuncionarios","parsedFuncionarios","login","user","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Criando o contexto de usuário\r\nexport const UserContext = createContext();\r\n\r\n// Criando o provider do contexto\r\nexport const UserProvider = ({ children }) => {\r\n  // Estado para armazenar dados do usuário\r\n  const [userData, setUserData] = useState(() => {\r\n    // Inicializar com dados do localStorage, se disponíveis\r\n    const storedUser = localStorage.getItem('user');\r\n    return storedUser ? JSON.parse(storedUser) : null;\r\n  });\r\n\r\n  // Estado para a lista de funcionários\r\n  const [funcionarios, setFuncionarios] = useState(() => {\r\n    const storedFuncionarios = localStorage.getItem('funcionarios');\r\n    return storedFuncionarios ? JSON.parse(storedFuncionarios) : [\r\n      { id: 101, nome: 'João Silva' },\r\n      { id: 102, nome: 'Maria Oliveira' },\r\n      { id: 103, nome: 'Carlos Pereira' },\r\n      { id: 104, nome: 'Ana Souza' },\r\n      { id: 105, nome: 'Pedro Santos' }\r\n    ];\r\n  });\r\n\r\n  // Atualizar o localStorage quando userData mudar\r\n  useEffect(() => {\r\n    if (userData) {\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n    }\r\n  }, [userData]);\r\n\r\n  // Atualizar o localStorage quando a lista de funcionários mudar\r\n  useEffect(() => {\r\n    localStorage.setItem('funcionarios', JSON.stringify(funcionarios));\r\n  }, [funcionarios]);\r\n\r\n  // Função para adicionar novo funcionário (corrigida para evitar duplicatas)\r\n  const addFuncionario = (newFuncionario) => {\r\n    return new Promise((resolve) => {\r\n      setFuncionarios(prevFuncionarios => {\r\n        // Verificar se o funcionário já existe pelo ID\r\n        const existsById = prevFuncionarios.some(f => f.id === newFuncionario.id);\r\n        \r\n        // Verificar se o nome já existe\r\n        const existsByName = prevFuncionarios.some(f => \r\n          f.nome.toLowerCase() === newFuncionario.nome.toLowerCase() && f.id !== newFuncionario.id\r\n        );\r\n        \r\n        // Se já existe, não modificar a lista\r\n        if (existsById) {\r\n          resolve(prevFuncionarios);\r\n          return prevFuncionarios;\r\n        }\r\n        \r\n        // Se o nome existir, adicionar um sufixo\r\n        let finalNome = newFuncionario.nome;\r\n        if (existsByName) {\r\n          finalNome = `${newFuncionario.nome} (${prevFuncionarios.length + 1})`;\r\n        }\r\n        \r\n        // Criar objeto com nome potencialmente modificado\r\n        const funcionarioToAdd = {\r\n          ...newFuncionario,\r\n          nome: finalNome\r\n        };\r\n        \r\n        // Adicionar notificação para o admin\r\n        const adminNotifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');\r\n        adminNotifications.push({\r\n          id: Date.now(),\r\n          type: 'novoFuncionario',\r\n          message: `Novo funcionário registrado: ${funcionarioToAdd.nome}`,\r\n          date: new Date().toLocaleDateString('pt-BR'),\r\n          read: false\r\n        });\r\n        localStorage.setItem('adminNotifications', JSON.stringify(adminNotifications));\r\n        \r\n        // Criar e retornar nova lista\r\n        const updatedList = [...prevFuncionarios, funcionarioToAdd];\r\n        \r\n        // Atualizar localStorage imediatamente para garantir sincronização\r\n        localStorage.setItem('funcionarios', JSON.stringify(updatedList));\r\n        \r\n        resolve(updatedList);\r\n        return updatedList;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Função para obter a lista atualizada de funcionários do localStorage\r\n  const refreshFuncionarios = () => {\r\n    const storedFuncionarios = localStorage.getItem('funcionarios');\r\n    if (storedFuncionarios) {\r\n      const parsedFuncionarios = JSON.parse(storedFuncionarios);\r\n      setFuncionarios(parsedFuncionarios);\r\n    }\r\n  };\r\n\r\n  // Função para login\r\n  const login = (user) => {\r\n    setUserData(user);\r\n    \r\n    // Atualizar lista de funcionários ao fazer login\r\n    refreshFuncionarios();\r\n  };\r\n\r\n  // Função para logout\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setUserData(null);\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ \r\n      userData, \r\n      login, \r\n      logout, \r\n      funcionarios, \r\n      setFuncionarios,\r\n      addFuncionario,\r\n      refreshFuncionarios\r\n    }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para facilitar o uso do contexto\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error(\"useUser deve ser usado dentro de um UserProvider\");\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}