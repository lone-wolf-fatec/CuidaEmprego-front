{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst HorasExtrasTab = () => {\n  _s();\n  // Estado para os registros de horas extras\n  const [overtimeEntries, setOvertimeEntries] = useState(() => {\n    const storedOvertimes = localStorage.getItem('overtimeEntries');\n    return storedOvertimes ? JSON.parse(storedOvertimes) : [\n      // ... seus dados iniciais\n    ];\n  });\n\n  // Estados para nova hora extra\n  const [newOvertime, setNewOvertime] = useState({\n    funcionarioId: '',\n    funcionarioNome: '',\n    date: '',\n    hours: '',\n    reason: ''\n  });\n\n  // Lista de funcionários - SUBSTITUIR ESTA IMPLEMENTAÇÃO\n  // const [funcionarios, setFuncionarios] = useState(() => {\n  //   const storedFuncionarios = localStorage.getItem('funcionarios');\n  //   return storedFuncionarios ? JSON.parse(storedFuncionarios) : [...];\n  // });\n\n  // NOVA IMPLEMENTAÇÃO: Estado para todos os funcionários possíveis\n  const [allFuncionarios, setAllFuncionarios] = useState([]);\n\n  // Função para obter todos os funcionários possíveis de todas as fontes\n  const getAllPossibleFuncionarios = () => {\n    try {\n      // 1. Obter do registeredUsers\n      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\n      const funcionariosFromUsers = registeredUsers.map(user => ({\n        id: user.id,\n        nome: user.name || user.nome\n      }));\n\n      // 2. Obter do localStorage \"funcionarios\"\n      const storedFuncionarios = JSON.parse(localStorage.getItem('funcionarios') || '[]');\n\n      // 3. Obter dados específicos deste componente\n      let componentSpecificFuncionarios = [];\n      try {\n        const overtimeEntries = JSON.parse(localStorage.getItem('overtimeEntries') || '[]');\n        const feriasEntries = JSON.parse(localStorage.getItem('feriasEntries') || '[]');\n        const folgaEntries = JSON.parse(localStorage.getItem('folgaEntries') || '[]');\n        const funcionariosFromOvertime = overtimeEntries.map(entry => ({\n          id: entry.funcionarioId,\n          nome: entry.funcionarioNome\n        }));\n        const funcionariosFromFerias = feriasEntries.map(entry => ({\n          id: entry.funcionarioId,\n          nome: entry.funcionarioNome\n        }));\n        const funcionariosFromFolgas = folgaEntries.map(entry => ({\n          id: entry.funcionarioId,\n          nome: entry.funcionarioNome\n        }));\n        componentSpecificFuncionarios = [...funcionariosFromOvertime, ...funcionariosFromFerias, ...funcionariosFromFolgas];\n      } catch (error) {\n        console.error('Erro ao obter funcionários de registros específicos:', error);\n      }\n\n      // 4. Obter dados do usuário atual se disponível\n      let currentUser = [];\n      try {\n        const userStorage = JSON.parse(localStorage.getItem('user') || '{}');\n        if (userStorage && userStorage.id) {\n          currentUser = [{\n            id: userStorage.id,\n            nome: userStorage.name || userStorage.nome\n          }];\n        }\n      } catch (error) {\n        console.error('Erro ao obter dados do usuário atual:', error);\n      }\n\n      // 5. Criar um mapa para eliminar duplicatas por ID\n      const funcionariosMap = new Map();\n\n      // Adicionar de todas as fontes\n      [...funcionariosFromUsers, ...storedFuncionarios, ...componentSpecificFuncionarios, ...currentUser].forEach(func => {\n        if (func && func.id) {\n          funcionariosMap.set(func.id, func);\n        }\n      });\n\n      // Converter de volta para array e ordenar por nome\n      return Array.from(funcionariosMap.values()).filter(func => func.nome) // Garantir que todos têm um nome\n      .sort((a, b) => a.nome.localeCompare(b.nome));\n    } catch (error) {\n      console.error('Erro ao obter funcionários de todas as fontes:', error);\n      return [];\n    }\n  };\n\n  // useEffect para manter a lista de funcionários atualizada\n  useEffect(() => {\n    const updateAllFuncionarios = () => {\n      const allPossible = getAllPossibleFuncionarios();\n      setAllFuncionarios(allPossible);\n      console.log('HorasExtrasTab - Lista completa de funcionários atualizada:', allPossible);\n    };\n\n    // Atualizar logo no início\n    updateAllFuncionarios();\n\n    // E a cada 3 segundos\n    const interval = setInterval(updateAllFuncionarios, 3000);\n    return () => clearInterval(interval);\n  }, []); // Sem dependências para garantir que rode periodicamente\n\n  // Função atualizada para selecionar funcionário\n  const handleSelecionarFuncionario = e => {\n    const funcionarioId = parseInt(e.target.value);\n    if (funcionarioId) {\n      // Procurar em allFuncionarios\n      const funcionarioSelecionado = allFuncionarios.find(f => f.id === funcionarioId);\n      if (funcionarioSelecionado) {\n        console.log(\"Funcionário selecionado:\", funcionarioSelecionado);\n        setNewOvertime({\n          ...newOvertime,\n          funcionarioId: funcionarioId,\n          funcionarioNome: funcionarioSelecionado.nome\n        });\n      } else {\n        console.warn(\"Funcionário não encontrado para ID:\", funcionarioId);\n      }\n    } else {\n      setNewOvertime({\n        ...newOvertime,\n        funcionarioId: '',\n        funcionarioNome: ''\n      });\n    }\n  };\n\n  // ... Resto do código do componente\n\n  // MODIFICAÇÃO NO FORMULÁRIO DE NOVA HORA EXTRA\n  // Substitua o seletor de funcionário por este:\n  /*\r\n  <div>\r\n    <label className=\"block text-sm text-purple-300 mb-1\">Funcionário *</label>\r\n    <select \r\n      className=\"w-full bg-purple-800 border border-purple-700 rounded-md p-2 text-white\"\r\n      value={newOvertime.funcionarioId}\r\n      onChange={handleSelecionarFuncionario}\r\n      required\r\n    >\r\n      <option value=\"\">Selecione um funcionário</option>\r\n      {allFuncionarios.map(funcionario => (\r\n        <option key={funcionario.id} value={funcionario.id}>\r\n          {funcionario.nome}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n  */\n\n  // MODIFICAÇÃO NO FILTRO DE FUNCIONÁRIO\n  // Substitua o seletor de filtro de funcionário por este:\n  /*\r\n  <div>\r\n    <label className=\"block text-sm text-purple-300 mb-1\">Funcionário</label>\r\n    <select \r\n      className=\"w-full bg-purple-800 border border-purple-700 rounded-md p-2 text-white\"\r\n      value={filtros.funcionario}\r\n      onChange={(e) => setFiltros({...filtros, funcionario: e.target.value})}\r\n    >\r\n      <option value=\"\">Todos os funcionários</option>\r\n      {[...new Set([\r\n        ...allFuncionarios.map(f => f.nome),\r\n        ...overtimeEntries.map(entry => entry.funcionarioNome)\r\n      ])].filter(Boolean).sort().map((nome, index) => (\r\n        <option key={index} value={nome}>{nome}</option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n  */\n};\n_s(HorasExtrasTab, \"k444oL9QvcAPBgGrHs8mpMj4dzI=\");\n_c = HorasExtrasTab;\nexport default HorasExtrasTab;\nvar _c;\n$RefreshReg$(_c, \"HorasExtrasTab\");","map":{"version":3,"names":["React","useState","useEffect","HorasExtrasTab","_s","overtimeEntries","setOvertimeEntries","storedOvertimes","localStorage","getItem","JSON","parse","newOvertime","setNewOvertime","funcionarioId","funcionarioNome","date","hours","reason","allFuncionarios","setAllFuncionarios","getAllPossibleFuncionarios","registeredUsers","funcionariosFromUsers","map","user","id","nome","name","storedFuncionarios","componentSpecificFuncionarios","feriasEntries","folgaEntries","funcionariosFromOvertime","entry","funcionariosFromFerias","funcionariosFromFolgas","error","console","currentUser","userStorage","funcionariosMap","Map","forEach","func","set","Array","from","values","filter","sort","a","b","localeCompare","updateAllFuncionarios","allPossible","log","interval","setInterval","clearInterval","handleSelecionarFuncionario","e","parseInt","target","value","funcionarioSelecionado","find","f","warn","_c","$RefreshReg$"],"sources":["C:/Users/Carlos/Desktop/API SOZINHO 2/alone-front/src/components/HorasExtrasTab.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst HorasExtrasTab = () => {\r\n  // Estado para os registros de horas extras\r\n  const [overtimeEntries, setOvertimeEntries] = useState(() => {\r\n    const storedOvertimes = localStorage.getItem('overtimeEntries');\r\n    return storedOvertimes ? JSON.parse(storedOvertimes) : [\r\n      // ... seus dados iniciais\r\n    ];\r\n  });\r\n  \r\n  // Estados para nova hora extra\r\n  const [newOvertime, setNewOvertime] = useState({\r\n    funcionarioId: '',\r\n    funcionarioNome: '',\r\n    date: '',\r\n    hours: '',\r\n    reason: ''\r\n  });\r\n  \r\n  // Lista de funcionários - SUBSTITUIR ESTA IMPLEMENTAÇÃO\r\n  // const [funcionarios, setFuncionarios] = useState(() => {\r\n  //   const storedFuncionarios = localStorage.getItem('funcionarios');\r\n  //   return storedFuncionarios ? JSON.parse(storedFuncionarios) : [...];\r\n  // });\r\n  \r\n  // NOVA IMPLEMENTAÇÃO: Estado para todos os funcionários possíveis\r\n  const [allFuncionarios, setAllFuncionarios] = useState([]);\r\n  \r\n  // Função para obter todos os funcionários possíveis de todas as fontes\r\n  const getAllPossibleFuncionarios = () => {\r\n    try {\r\n      // 1. Obter do registeredUsers\r\n      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');\r\n      const funcionariosFromUsers = registeredUsers.map(user => ({\r\n        id: user.id,\r\n        nome: user.name || user.nome\r\n      }));\r\n      \r\n      // 2. Obter do localStorage \"funcionarios\"\r\n      const storedFuncionarios = JSON.parse(localStorage.getItem('funcionarios') || '[]');\r\n      \r\n      // 3. Obter dados específicos deste componente\r\n      let componentSpecificFuncionarios = [];\r\n      try {\r\n        const overtimeEntries = JSON.parse(localStorage.getItem('overtimeEntries') || '[]');\r\n        const feriasEntries = JSON.parse(localStorage.getItem('feriasEntries') || '[]');\r\n        const folgaEntries = JSON.parse(localStorage.getItem('folgaEntries') || '[]');\r\n        \r\n        const funcionariosFromOvertime = overtimeEntries.map(entry => ({\r\n          id: entry.funcionarioId,\r\n          nome: entry.funcionarioNome\r\n        }));\r\n        \r\n        const funcionariosFromFerias = feriasEntries.map(entry => ({\r\n          id: entry.funcionarioId,\r\n          nome: entry.funcionarioNome\r\n        }));\r\n        \r\n        const funcionariosFromFolgas = folgaEntries.map(entry => ({\r\n          id: entry.funcionarioId,\r\n          nome: entry.funcionarioNome\r\n        }));\r\n        \r\n        componentSpecificFuncionarios = [\r\n          ...funcionariosFromOvertime,\r\n          ...funcionariosFromFerias,\r\n          ...funcionariosFromFolgas\r\n        ];\r\n      } catch (error) {\r\n        console.error('Erro ao obter funcionários de registros específicos:', error);\r\n      }\r\n      \r\n      // 4. Obter dados do usuário atual se disponível\r\n      let currentUser = [];\r\n      try {\r\n        const userStorage = JSON.parse(localStorage.getItem('user') || '{}');\r\n        if (userStorage && userStorage.id) {\r\n          currentUser = [{\r\n            id: userStorage.id,\r\n            nome: userStorage.name || userStorage.nome\r\n          }];\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao obter dados do usuário atual:', error);\r\n      }\r\n      \r\n      // 5. Criar um mapa para eliminar duplicatas por ID\r\n      const funcionariosMap = new Map();\r\n      \r\n      // Adicionar de todas as fontes\r\n      [\r\n        ...funcionariosFromUsers, \r\n        ...storedFuncionarios, \r\n        ...componentSpecificFuncionarios,\r\n        ...currentUser\r\n      ].forEach(func => {\r\n        if (func && func.id) {\r\n          funcionariosMap.set(func.id, func);\r\n        }\r\n      });\r\n      \r\n      // Converter de volta para array e ordenar por nome\r\n      return Array.from(funcionariosMap.values())\r\n        .filter(func => func.nome) // Garantir que todos têm um nome\r\n        .sort((a, b) => a.nome.localeCompare(b.nome));\r\n    } catch (error) {\r\n      console.error('Erro ao obter funcionários de todas as fontes:', error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  // useEffect para manter a lista de funcionários atualizada\r\n  useEffect(() => {\r\n    const updateAllFuncionarios = () => {\r\n      const allPossible = getAllPossibleFuncionarios();\r\n      setAllFuncionarios(allPossible);\r\n      console.log('HorasExtrasTab - Lista completa de funcionários atualizada:', allPossible);\r\n    };\r\n    \r\n    // Atualizar logo no início\r\n    updateAllFuncionarios();\r\n    \r\n    // E a cada 3 segundos\r\n    const interval = setInterval(updateAllFuncionarios, 3000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []); // Sem dependências para garantir que rode periodicamente\r\n  \r\n  // Função atualizada para selecionar funcionário\r\n  const handleSelecionarFuncionario = (e) => {\r\n    const funcionarioId = parseInt(e.target.value);\r\n    if (funcionarioId) {\r\n      // Procurar em allFuncionarios\r\n      const funcionarioSelecionado = allFuncionarios.find(f => f.id === funcionarioId);\r\n      if (funcionarioSelecionado) {\r\n        console.log(\"Funcionário selecionado:\", funcionarioSelecionado);\r\n        setNewOvertime({\r\n          ...newOvertime,\r\n          funcionarioId: funcionarioId,\r\n          funcionarioNome: funcionarioSelecionado.nome\r\n        });\r\n      } else {\r\n        console.warn(\"Funcionário não encontrado para ID:\", funcionarioId);\r\n      }\r\n    } else {\r\n      setNewOvertime({\r\n        ...newOvertime,\r\n        funcionarioId: '',\r\n        funcionarioNome: ''\r\n      });\r\n    }\r\n  };\r\n  \r\n  // ... Resto do código do componente\r\n  \r\n  // MODIFICAÇÃO NO FORMULÁRIO DE NOVA HORA EXTRA\r\n  // Substitua o seletor de funcionário por este:\r\n  /*\r\n  <div>\r\n    <label className=\"block text-sm text-purple-300 mb-1\">Funcionário *</label>\r\n    <select \r\n      className=\"w-full bg-purple-800 border border-purple-700 rounded-md p-2 text-white\"\r\n      value={newOvertime.funcionarioId}\r\n      onChange={handleSelecionarFuncionario}\r\n      required\r\n    >\r\n      <option value=\"\">Selecione um funcionário</option>\r\n      {allFuncionarios.map(funcionario => (\r\n        <option key={funcionario.id} value={funcionario.id}>\r\n          {funcionario.nome}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n  */\r\n  \r\n  // MODIFICAÇÃO NO FILTRO DE FUNCIONÁRIO\r\n  // Substitua o seletor de filtro de funcionário por este:\r\n  /*\r\n  <div>\r\n    <label className=\"block text-sm text-purple-300 mb-1\">Funcionário</label>\r\n    <select \r\n      className=\"w-full bg-purple-800 border border-purple-700 rounded-md p-2 text-white\"\r\n      value={filtros.funcionario}\r\n      onChange={(e) => setFiltros({...filtros, funcionario: e.target.value})}\r\n    >\r\n      <option value=\"\">Todos os funcionários</option>\r\n      {[...new Set([\r\n        ...allFuncionarios.map(f => f.nome),\r\n        ...overtimeEntries.map(entry => entry.funcionarioNome)\r\n      ])].filter(Boolean).sort().map((nome, index) => (\r\n        <option key={index} value={nome}>{nome}</option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n  */\r\n};\r\n\r\nexport default HorasExtrasTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}